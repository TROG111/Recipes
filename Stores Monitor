{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"pbSwitch","type":{"events":[],"methods":[]}},"2":{"name":"myDatabank","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":" \nlistStockContainers = {}\nlistStockIndex={}\nmaxIndex = 1\nfunction setupMatierialIndex (material, values)\n    listStockContainers[material]=values\n    listStockIndex[maxIndex]=material\n    maxIndex = maxIndex+1\nend\n\n    setupMatierialIndex(\"lrmilatmo\",{17000, \"s\",0,1})\n    setupMatierialIndex(\"warpcell\",{100, \"m\",0,1})\n    setupMatierialIndex(\"hydrogen\",{0.07, \"m\",0,1000})\n    setupMatierialIndex(\"oxygen\",{1, \"m\",0,1000})\n    setupMatierialIndex(\"lrcombustion\",{9230, \"s\",0,2})\n    setupMatierialIndex(\"sbroboticarm\",{100, \"s\",0,20})\n    setupMatierialIndex(\"mbroboticarm\",{ 927, \"s\",0,20})\n    setupMatierialIndex(\"lbroboticarm\",{ 4930, \"s\",0,20})\n    setupMatierialIndex(\"xsbmobilepanel\",{ 20, \"s\",0,20})\n    setupMatierialIndex(\"sbmobilepanel\",{103, \"s\",0,20})\n    setupMatierialIndex(\"mbmobilepanel\",{ 536, \"s\",0,20})\n    setupMatierialIndex(\"lbmobilepanel\",{ 2830, \"s\",0,20})\n    setupMatierialIndex(\"xsbstandard\",{ 4.20, \"s\",0,20})\n    setupMatierialIndex(\"sbstandard\",{ 23.1, \"s\",0,20})\n    setupMatierialIndex(\"mbstandard\",{ 155.4, \"s\",0,20})\n    setupMatierialIndex(\"lbstandard\",{ 1080, \"s\",0,20})\n    setupMatierialIndex(\"xsbreinforced\",{ 12.88, \"s\",0,20})\n    setupMatierialIndex(\"sbreinforced\",{ 70.84, \"s\",0,20})\n    setupMatierialIndex(\"mbreinforced\",{ 476, \"s\",0,20})\n    setupMatierialIndex(\"lbreinforced\",{ 3320, \"s\",0,20})\n    setupMatierialIndex(\"lrreinforced\",{3370, \"s\",0,2})\n    setupMatierialIndex(\"bcomponent\",{ 2.25, \"s\",0,500})\n    setupMatierialIndex(\"ucomponent\",{ 2.34, \"s\",0,200})\n    setupMatierialIndex(\"acomponent\",{ 2.5, \"s\",0,100})\n    setupMatierialIndex(\"bconnector\",{ 3.75, \"s\",0,500})\n    setupMatierialIndex(\"uconnector\",{ 3.9, \"s\",0,200})\n    setupMatierialIndex(\"aconnector\",{ 4, \"s\",0,100})\n    setupMatierialIndex(\"belectronic\",{ 5.22, \"s\",0,200})\n    setupMatierialIndex(\"uelectronic\",{ 5.34, \"s\",0,100})\n    setupMatierialIndex(\"aelectronic\",{ 5.45, \"s\",0,50})\n    setupMatierialIndex(\"bscrew\",{ 8.05, \"s\",0,500})\n    setupMatierialIndex(\"uscrew\",{ 7.9 , \"s\",0,200})\n    setupMatierialIndex(\"ascrew\",{ 7.5, \"s\",0,100})\n    setupMatierialIndex(\"bpipe\",{ 2.4, \"s\",0,500})\n    setupMatierialIndex(\"upipe\",{ 2.32, \"s\" ,0,200})\n    setupMatierialIndex(\"apipe\",{ 2.19, \"s\",0,100})\n    setupMatierialIndex(\"bled\",{ 1.25, \"s\",0,500})\n    setupMatierialIndex(\"uled\",{ 1.27 , \"s\",0,200})\n    setupMatierialIndex(\"aled\",{ 1.3, \"s\",0,100})\n    setupMatierialIndex(\"bantimatter\",{ 24, \"s\",0,100})\n    setupMatierialIndex(\"uantimatter\",{ 24.32, \"s\",0,100})\n    setupMatierialIndex(\"aantimatter\",{ 24.88, \"s\",0,20})\n    setupMatierialIndex(\"aamc\",{ 107.08, \"s\",0,20})\n    setupMatierialIndex(\"bquantumcore\",{ 10.72, \"s\",0,100})\n    setupMatierialIndex(\"uquantumcore\",{ 11.04, \"s\",0,100})\n    setupMatierialIndex(\"aquantumcore\",{ 11.24, \"s\",0,20})\n    setupMatierialIndex(\"aqau\",{ 35.78, \"s\",0,20})\n    setupMatierialIndex(\"bmagnet\",{ 63.3, \"s\",0,200})\n    setupMatierialIndex(\"umagnet\",{ 62.1, \"s\",0,200})\n    setupMatierialIndex(\"amagnet\",{ 63.89, \"s\",0,150})\n    setupMatierialIndex(\"bhydraulic\",{ 28.95, \"s\",0,500})\n    setupMatierialIndex(\"uhydraulic\",{ 28.35, \"s\",0,200})\n    setupMatierialIndex(\"ahydraulic\",{ 29.02, \"s\",0,50})\n    setupMatierialIndex(\"bsingularity\",{ 45.36, \"s\",0,100})\n    setupMatierialIndex(\"usingularity\",{ 44.88, \"s\",0,50})\n    setupMatierialIndex(\"asingularity\",{ 46.22, \"s\",0,50})\n    setupMatierialIndex(\"bburner\",{ 50.2, \"s\",0,500})\n    setupMatierialIndex(\"uburner\",{ 49.4, \"s\",0,200})\n    setupMatierialIndex(\"aburner\",{ 48.5, \"s\",0,100})\n    setupMatierialIndex(\"rburner\",{ 48.5, \"s\",0,100})\n    setupMatierialIndex(\"bpowerunit\",{ 60, \"s\",0,500})\n    setupMatierialIndex(\"upowerunit\",{ 62.4, \"s\",0,200})\n    setupMatierialIndex(\"apowerunit\",{ 64.9, \"s\",0,150})\n    setupMatierialIndex(\"binjector\",{ 20.3, \"s\",0,500})\n    setupMatierialIndex(\"uinjector\",{ 20.5, \"s\",0,200})\n    setupMatierialIndex(\"ainjector\",{ 20.45, \"s\",0,100})\n    setupMatierialIndex(\"rinjector\",{ 20.63, \"s\",0,250})\n    setupMatierialIndex(\"bfixation\",{ 1.12, \"s\",0,1000})\n    setupMatierialIndex(\"ufixation\",{ 1.16, \"s\",0,200})\n    setupMatierialIndex(\"afixation\",{ 1.21, \"s\",0,100})\n    setupMatierialIndex(\"bprocessor\",{ 14.84, \"s\",0,200})\n    setupMatierialIndex(\"uprocessor\",{ 15.56, \"s\",0,100})\n    setupMatierialIndex(\"aprocessor\",{ 15.56, \"s\",0,50})\n    setupMatierialIndex(\"silicon\",{2.33, \"m\",0,80000})\n    setupMatierialIndex(\"aluminium\",{2.7, \"m\",0,80000})\n    setupMatierialIndex(\"iron\",{7.85, \"m\",0,80000})\n    setupMatierialIndex(\"carbon\",{2.27, \"m\",0,80000})\n    setupMatierialIndex(\"sodium\",{0.97, \"m\",0,40000})\n    setupMatierialIndex(\"chromium\",{7.19, \"m\",0,40000})\n    setupMatierialIndex(\"calcium\",{1.55, \"m\",0,40000})\n    setupMatierialIndex(\"copper\",{8.96, \"m\",0,40000})\n    setupMatierialIndex(\"silver\",{10.49, \"m\",0,10000})\n    setupMatierialIndex(\"nickel\",{8.91, \"m\",0,10000})\n    setupMatierialIndex(\"lithium\",{0.53, \"m\",0,10000})\n    setupMatierialIndex(\"sulfer\",{1.82, \"m\",0,10000})\n    setupMatierialIndex(\"gold\",{19.3, \"m\",0,5000})\n    setupMatierialIndex(\"fluorine\",{1.7, \"m\",0,5000})\n    setupMatierialIndex(\"scandium\",{2.98, \"m\",0,5000})\n    setupMatierialIndex(\"cobalt\",{8.9, \"m\",0,5000})\n    setupMatierialIndex(\"manganese\",{7.21, \"m\",0,100})\n    setupMatierialIndex(\"niobium\",{8.57, \"m\",0,100})\n    setupMatierialIndex(\"titanium\",{4.51, \"m\",0,100})\n    setupMatierialIndex(\"vanadium\",{6, \"m\",0,100})\n    setupMatierialIndex(\"steel\",{8.05, \"s\",0,2000})\n    setupMatierialIndex(\"alfe\",{7.5, \"s\",0,2000})\n    setupMatierialIndex(\"cacu\",{8.1, \"s\",0,1000})\n    setupMatierialIndex(\"stainless\",{7.75, \"s\",0,1000})\n    setupMatierialIndex(\"silumin\",{3, \"s\",0,2000})\n    setupMatierialIndex(\"duramin\",{2.8, \"s\",0,500})\n    setupMatierialIndex(\"polycalcite\",{1.5, \"s\",0,1000})\n    setupMatierialIndex(\"polycarbonate\",{1.4, \"s\",0,2000})\n    setupMatierialIndex(\"glass\",{2.5, \"s\",0,2000})\n    setupMatierialIndex(\"aglass\",{2.6, \"s\",0,1000})\n    setupMatierialIndex(\"agliglass\",{2.8, \"s\",0,500})\n    setupMatierialIndex(\"agcu\",{9.2, \"s\",0,500})\n    setupMatierialIndex(\"polysulfide\",{1.6, \"s\",0,500})\n    setupMatierialIndex(\"inconel\",{8.5, \"s\",0,500})\n    setupMatierialIndex(\"alli\",{2.5, \"s\",0,300})\n    setupMatierialIndex(\"maraging\",{8.23, \"s\",0,700})\n    setupMatierialIndex(\"scal\",{2.85, \"s\",0,300})\n    setupMatierialIndex(\"redgold\",{14.13, \"s\",0,300})\n    setupMatierialIndex(\"polyfluoride\",{1.65, \"s\",0,500})\n\n    maxStockContainers = 40\nlocal containerSizeTable ={ 400, 1281.31, 7421.35, 8000 }\n\n\nlocal function extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]*[]]..\"]\"..\"])\"\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return list|nil, number|nil, number|nil\nlocal function extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]*[]]..\"]\"..\"])\"\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction isStockContainer ( uidName )\n    if listStockContainers[uidName]==nil then\n        return 0\n    else\n        return 1\n    end\nend\n\nfunction getContainerMass (containerCode)\n    if containerCode == \"xs\" then return containerSizeTable[1]\n        else if containerCode == \"s\" then return containerSizeTable[2]\n        \telse if containerCode == \"m\" then return containerSizeTable[3]\n             \telse if containerCode == \"l\" then return containerSizeTable[4]\n                 end\n             end\n        end\n    end\n    return 0\nend\n\nfunction monitorStock()\n    local uids = core.getElementIdList()\n    for i = 1, maxIndex-1 do\n        --system.print(i..\":\"..listStockIndex[i])\n        listStockContainers[listStockIndex[i]][3]=0\n    end\n    for _, uid in ipairs(uids) do\n    \tlocal uidType = string.lower(core.getElementTypeById(uid))\n    \tif uidType == \"container\" then\n              local uidName = string.lower(core.getElementNameById(uid))\n              local stock = isStockContainer(uidName)\n      \t\tif stock > 0 then\n             \t uidStockVolume = (core.getElementMassById(uid) - getContainerMass(listStockContainers[uidName][2]))\n                \t\t\t\t/ listStockContainers[uidName][1]\n                  listStockContainers[uidName][3]=listStockContainers[uidName][3]+uidStockVolume\n              end\n    \tend\n    end\n    stockJson = \"[\"\n    for i = 1, maxIndex-1 do\n        if i > 1 then stockJson = stockJson .. [[,]] end\n        --listStockVolume[i] = math.floor(listStockContainers[listStockIndex[i]][3]+0.5)\n        stockJson = stockJson .. [[{\"name\":\"]]..listStockIndex[i]..[[\",\"stock\":]]..\n            math.floor(listStockContainers[listStockIndex[i]][3]+0.5)..[[,\"flag\":]]\n\t   if listStockContainers[listStockIndex[i]][3] < listStockContainers[listStockIndex[i]][4]/4 then\n            stockJson = stockJson .. [[\"C\"]]\n        elseif listStockContainers[listStockIndex[i]][3] < listStockContainers[listStockIndex[i]][4]/2 then\n            stockJson = stockJson .. [[\"W\"]]\n        else\n            stockJson = stockJson .. [[\"N\"]]\n        end\n        stockJson = stockJson .. [[}]]\n    end\n    stockJson = stockJson .. \"]\"\n    --system.print(stockJson)\n    myDatabank.setStringValue(\"stockData\",stockJson)\nend\n\nfunction string:split(delimiter,maxLen)\n    --system.print(\"Self:\"..self)\n  if not(delimeter) then delimiter = \" \" end\n  local result = { }\n  local from  = 1\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do   \n    table.insert( result, string.sub( self, from , delim_from-1 ) )\n    subStr = string.sub( self, from , delim_from-1 )\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  table.insert( result, string.sub( self, from  ) )\n  subStr = string.sub( self, from  )\n  return result\nend\n\nlocal industries = {}\nindustries[#industries+1] = \"electronics\"\nindustries[#industries+1] = \"metalwork\"\nindustries[#industries+1] = \"glass\"\nindustries[#industries+1] = \"smelter\"\nindustries[#industries+1] = \"refiner\"\nindustries[#industries+1] = \"recycler\"\nindustries[#industries+1] = \"chemical\"\nindustries[#industries+1] = \"assembly\"\nindustries[#industries+1] = \"3d\"\n\nfunction isIndustry(elem)\n    for i=1,#industries do\n        if elem == industries[i] then return true end\n    end\n    return false\nend\n\nfunction indTime(time)\n   if time < 1 then return \"0 sec\"\n   elseif time < 120 then return string.format(\"%d secs\", math.floor(time))\n   elseif time < (120*60) then return string.format(\"%d mins\", math.floor(time/60))\n   elseif time < (120*60*60) then return string.format(\"%d hours\", math.floor(time/(60*60)))\n   elseif time < (120*60*60*24) then return string.format(\"%d days\", math.floor(time/(60*60*24)))\n   else \n        return \"unknown\"\n   end\nend\n\nfunction monitorIndustry()\n    local uids = core.getElementIdList()\n    local words = {}\n    local industryJson = \"\"\n\n    for _, uid in ipairs(uids) do\n        local uidName = string.lower(core.getElementNameById(uid))\n        local uidType = string.lower(core.getElementTypeById(uid))\n        --system.print(uidType)\n        local words=uidType:split()\n        --system.print(json.encode(words))\n        if not(words == nil) and #words > 1 then\n--            local uidState = \"\"\n--            local uidSchemaId = 0\n            if isIndustry(words[2]) then\n                local uidStatusStr = core.getElementIndustryStatus(uid)\n                --system.print(\"Ind Status:\"..uidStatusStr)\n                local uidState = extractStringJsonValue(uidStatusStr,\"state\",1)\n                local uidSchemaId = extractNumberJsonValue(uidStatusStr,\"schematicId\",1)\n                local uidTime = extractNumberJsonValue(uidStatusStr,\"remainingTime\",1)\n                --if uidState == \"RUNNING\" then\n                --    system.print(uidName..\" / \"..uidTime.. \"(\"..indTime(uidTime)..\")\")\n                --end\n                --system.print(\"Ind Data=\"..uidStatusStr)\n                if uidState and not(uidState == \"STOPPED\") then\n                    local schemaStr = core.getSchematicInfo(uidSchemaId)\n                    --system.print(\"Schema Data=\"..schemaStr)\n                    local uidProducts = extractListJsonValue(schemaStr,\"products\",1)\n                    local uidSchema = extractStringJsonValue(uidProducts,\"name\",1)\n                    if industryJson == \"\" then industryJson = \"[\" else industryJson = industryJson..\",\" end\n                    industryJson = industryJson .. \"{\" ..\n                        [[\"uid\":]] .. uid ..[[,]]..\n                        [[\"time\":\"]] .. indTime(uidTime) ..[[\",]]..\n                        [[\"name\":\"]] .. uidName ..[[\",]]..\n                        [[\"type\":\"]] .. uidType ..[[\",]]..\n                        [[\"state\":\"]] .. uidState ..[[\",]]..\n                        [[\"schema\":\"]] .. uidSchema ..[[\"}]]\n                    \n                end\n            end\n        end\n    end\n    if not(industryJson == \"\") then industryJson = industryJson .. \"]\" else industryJson = \"[]\" end\n    --system.print(industryJson)\n    myDatabank.setStringValue(\"industryData\",industryJson)\nend\n\n--myDatabank.clear()\nmonitorIndustry()\nmonitorStock()\nunit.setTimer(\"refresh\",30)\nunit.setTimer(\"reload\",30)\nunit.hide()\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"monitorIndustry()\nmonitorStock()","filter":{"args":[{"value":"refresh"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"","filter":{"args":[],"signature":"stop()","slotKey":"-1"},"key":"2"},{"code":"--core.unload()\ncore.load()","filter":{"args":[{"value":"reload"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"monitorStock()\n--system.print(\"test\")","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"4"}],"methods":[],"events":[]}
