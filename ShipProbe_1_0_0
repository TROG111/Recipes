{"slots":{"0":{"name":"core","type":{"events":[],"methods":[]}},"1":{"name":"db","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"json = require('dkjson')\n\ncontainerTankTalent=0\nspaceTankTalent=0\natmoTankTalent=0\nrocketTankTalent=0\n\ncontainMass={}\ncontainMass[\"C50\"]={\"hub\",55.8,64000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C124\"]={\"xs\",229.09,1000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C999\"]={\"s\",1280.31,8000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C7997\"]= {\"m\",7420,64000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C17000\"]= {\"l\",14840,128000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C34633\"]= {\"xl\",44210,128000*(1+(containerTankTalent*0.2))}\ncontainMass[\"C69267\"]= {\"el\",88410,128000*(1+(containerTankTalent*0.2))}\ncontainMass[\"S187\"]= {\"s\",182.67,400*(1+(spaceTankTalent*0.2))}\ncontainMass[\"S1496\"]= {\"m\",988.67,1600*(1+(spaceTankTalent*0.2))}\ncontainMass[\"S15933\"]= {\"l\",5480,12800*(1+(spaceTankTalent*0.2))}\ncontainMass[\"A50\"]= {\"xs\",35.03,100*(1+(atmoTankTalent*0.2))}\ncontainMass[\"A163\"]= {\"s\",182.67,400*(1+(atmoTankTalent*0.2))}\ncontainMass[\"A1315\"]= {\"m\",988.67,1600*(1+(atmoTankTalent*0.2))}\ncontainMass[\"A10461\"]= {\"l\",5480,12800*(1+(atmoTankTalent*0.2))}\ncontainMass[\"R366\"]= {\"xs\",173.42,400*(1+(rocketTankTalent*0.2))}\ncontainMass[\"R736\"]= {\"s\",886.72,800*(1+(rocketTankTalent*0.2))}\ncontainMass[\"R6231\"]= {\"m\",4720,6400*(1+(rocketTankTalent*0.2))}\ncontainMass[\"R68824\"]= {\"l\",25740,50000*(1+(rocketTankTalent*0.2))}\n\nfunction getContainerMassById(uid)\n    local eType = core.getElementTypeById(uid)\n    local eHP = core.getElementMaxHitPointsById(uid)\n    if string.lower(eType)==\"container\" then\n        if eHP < 100 then return containMass[\"C50\"][2]\n        elseif eHP < 800 then return containMass[\"C124\"][2]\n        elseif eHP < 7000 then return containMass[\"C999\"][2]\n        elseif eHP < 16000 then return containMass[\"C7997\"][2]\n        elseif eHP < 33000 then return containMass[\"C17000\"][2]\n        elseif eHP < 60000 then return containMass[\"C34633\"][2]\n        else return containMass[\"C69267\"][2]\n        end\n    elseif string.lower(eType) == \"space fuel tank\" then \n        if eHP < 1000 then return containMass[\"S187\"][2]\n        elseif eHP < 10000 then return containMass[\"S1496\"][2]\n        else return containMass[\"S15933\"][2]\n        end\n    elseif string.lower(eType) == \"atmospheric fuel tank\" then \n        if eHP < 100 then return containMass[\"A50\"][2]\n        elseif eHP < 1000 then return containMass[\"A163\"][2]\n        elseif eHP < 10000 then return containMass[\"A1315\"][2]\n        else return containMass[\"A10461\"][2]\n        end\n    elseif string.lower(eType) == \"rocket fuel tank\" then\n        if eHP < 600 then return containMass[\"R366\"][2]\n        elseif eHP < 5000 then return containMass[\"R736\"][2]\n        elseif eHP < 50000 then return containMass[\"R6231\"][2]\n        else return containMass[\"R68824\"][2]\n        end\n    else return 0\n    end\nend\n\nfunction getContentMassById(uid)\n    return (core.getElementMassById(uid) -getContainerMassById(uid))\nend\n    \nfunction getContentVolumeById(uid,content)\n    return (getContentMassById(uid)/itemDensity[content][1])\nend\n\nfunction getContainerCapacityById(uid)\n    return containMass[string.format(\"%.1s%d\",\n        \t\t\t\t\t\t    core.getElementTypeById(uid),\n        \t\t\t\t\t\t    math.floor(core.getElementHitPointsById(uid)))][3]\nend\n\nfunction getContainerSizeById(uid)\n    return containMass[string.format(\"%.1s%d\",\n        \t\t\t\t\t\t    core.getElementTypeById(uid),\n        \t\t\t\t\t\t    math.floor(core.getElementHitPointsById(uid)))][1]\nend\n\nfunction getContainerPercentageFillById(uid,content)\n    return ((getContentVolumeById(uid,content)*itemDensity[content][2]*100)/getContainerCapacityById(uid))\nend\n\n\nfunction existingElement(elemList, elem)\n    for i = 1,#elemList do\n        if elemList[i].eType == elem.eType and elemList[i].eMass == elem.eMass then\n            return i\n        end\n    end\n    return 0\nend\n\nfunction listElements()\n    local elementList = {}\n    local elementMass = 0\n\n    local shipMass = core.getConstructMass()\n    local uids = core.getElementIdList()\n    for _, uid in ipairs(uids) do\n        local element={}\n        element.eName = core.getElementNameById(uid)\n        system.print(\"eName:\"..element.eName)\n        element.eType = core.getElementTypeById(uid)\n        element.eMass = core.getElementMassById(uid)\n        elementMass = elementMass + element.eMass\n        element.eCount = 1\n        \n        if string.lower(element.eType) == \"container hub\" then element.eMass = 55.8\n        elseif string.lower(element.eType) == \"container\" then element.eMass = getContainerMassById(uid)\n        elseif string.lower(element.eType) == \"space fuel tank\" then element.eMass = getContainerMassById(uid)\n        elseif string.lower(element.eType) == \"atmospheric fuel tank\" then element.eMass = getContainerMassById(uid)\n        elseif string.lower(element.eType) == \"rocket fuel tank\" then element.eMass = getContainerMassById(uid)\n        end\n        \n        elementListId = existingElement(elementList, element)\n        if elementListId < 1 then          \n            elementList[#elementList+1] = element\n        else\n            elementList[elementListId].eCount = elementList[elementListId].eCount + 1\n        end\n    end\n    \n    honeycombMass = shipMass - elementMass\n    db.setStringValue(\"shipElements\", json.encode(elementList))\n    db.setStringValue(\"honeycombMass\", honeycombMass)\n    \n    system.print(json.encode(elementList))\n    system.print(honeycombMass)\n\nend\n\nsystem.print(\"Starting Analysis\")\nlistElements()\nsystem.print(\"Analysis Complete\")","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"}],"methods":[],"events":[]}
