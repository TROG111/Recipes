{"slots":{"0":{"name":"menudb","type":{"events":[],"methods":[]}},"1":{"name":"mapdb","type":{"events":[],"methods":[]}},"2":{"name":"screen1","type":{"events":[],"methods":[]}},"3":{"name":"core","type":{"events":[],"methods":[]}},"4":{"name":"emitter","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- this code goes in the screen.mousedown(*,*) trigger\n\nclickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY,\"\",\"screen1\")","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"2"},"key":"0"},{"code":"--stores = require('cpml.stores')\n--json = require('dkjson')\n--myjson = require('cpml.json-a')\n-- table of abbreviations used in recipes and their decoded string values\nstringMap={}\nstringMap[\"nm\"]=\"name\"\nstringMap[\"ti\"]=\"tier\"\nstringMap[\"tp\"]=\"type\"\nstringMap[\"ms\"]=\"mass\"\nstringMap[\"vo\"]=\"volume\"\nstringMap[\"op\"]=\"outputQuantity\"\nstringMap[\"tm\"]=\"time\"\nstringMap[\"bp\"]=\"byproducts\"\nstringMap[\"in\"]=\"industries\"\nstringMap[\"ip\"]=\"input\"\nstringMap[\"Pu\"]=\"Pure\"\nstringMap[\"Np\"]=\"Nanopack\"\nstringMap[\"Rc\"]=\"Recycler\"\nstringMap[\"O2P\"]=\"Oxygen Pure\"\nstringMap[\"HP\"]=\"Hydrogen Pure\"\nstringMap[\"Re\"]=\"Refiner\"\nstringMap[\"Ind\"]=\"Industry\"\nstringMap[\"ChI\"]=\"Chemical Industry\"\nstringMap[\"Cat\"]=\"Catalyst\"\nstringMap[\"FeP\"]=\"Pure Iron\"\nstringMap[\"AlP\"]=\"Pure Aluminium\"\nstringMap[\"CP\"]=\"Pure Carbon\"\nstringMap[\"SiP\"]=\"Pure Silicon\"\nstringMap[\"CaP\"]=\"Pure Calcium\"\nstringMap[\"ChP\"]=\"Pure Chromium\"\nstringMap[\"CuP\"]=\"Pure Copper\"\nstringMap[\"NaP\"]=\"Pure Sodium\"\nstringMap[\"LiP\"]=\"Pure Lithium\"\nstringMap[\"NiP\"]=\"Pure Nickel\"\nstringMap[\"AgP\"]=\"Pure Silver\"\nstringMap[\"SP\"]=\"Pure Sulfur\"\nstringMap[\"CoP\"]=\"Pure Cobalt\"\nstringMap[\"FlP\"]=\"Pure Fluorine\"\nstringMap[\"AuP\"]=\"Pure Gold\"\nstringMap[\"ScP\"]=\"Pure Scandium\"\nstringMap[\"MnP\"]=\"Pure Manganese\"\nstringMap[\"NbP\"]=\"Pure Niobium\"\nstringMap[\"TiP\"]=\"Pure Titanium\"\nstringMap[\"VaP\"]=\"Pure Vanadium\"\nstringMap[\"AtA\"]=\"Atmospheric Airbrake\"\nstringMap[\"SpcC\"]=\"Space Core Unit\"\nstringMap[\"DynC\"]=\"Dynamic Core Unit\"\nstringMap[\"StaC\"]=\"Static Core Unit\"\nstringMap[\"Aly\"]=\"Alloy\"\nstringMap[\"Prd\"]=\"Product\"\nstringMap[\"Bsc\"]=\"Basic\"\nstringMap[\"Unc\"]=\"Uncommon\"\nstringMap[\"Adv\"]=\"Advanced\"\nstringMap[\"Smt\"]=\"Smelter\"\nstringMap[\"Asl\"]=\"Assembly Line\"\nstringMap[\"CaCu\"]=\"Calcium Reinforced Copper\"\nstringMap[\"StSt\"]=\"Stainless Steel\"\nstringMap[\"PlyC\"]=\"Polycarbonate Plastic\"\nstringMap[\"GlF\"]=\"Glass Furnace\"\nstringMap[\"AdvG\"]=\"Advanced Glass\"\nstringMap[\"ReiG\"]=\"Reinforced Glass\"\nstringMap[\"PlyA\"]=\"Polycalcite Plastic\"\nstringMap[\"PlyS\"]=\"Polysulfide Plastic\"\nstringMap[\"Sil\"]=\"Silumin\"\nstringMap[\"Stl\"]=\"Steel\"\nstringMap[\"Com\"]=\"Component\"\nstringMap[\"IntP\"]=\"Intermediary Part\"\nstringMap[\"ElcI\"]=\"Electronics Ind\"\nstringMap[\"Con\"]=\"Connector\"\nstringMap[\"Fix\"]=\"Fixation\"\nstringMap[\"3D\"]=\"3D Printer\"\nstringMap[\"Adv\"]=\"Advanced\"\nstringMap[\"MetI\"]=\"Metalwork Ind\"\nstringMap[\"Dur\"]=\"Duralumin\"\nstringMap[\"CpxP\"]=\"Complex Part\"\nstringMap[\"AtMC\"]=\"Antimatter Capsule\"\nstringMap[\"Brn\"]=\"Burner\"\nstringMap[\"Elec\"]=\"Electronics\"\nstringMap[\"ExpM\"]=\"Explosive Module\"\nstringMap[\"Hyd\"]=\"Hydraulics\"\nstringMap[\"Inj\"]=\"Injector\"\nstringMap[\"Scw\"]=\"Screw\"\nstringMap[\"Mgnt\"]=\"Magnet\"\nstringMap[\"PwrS\"]=\"Power System\"\nstringMap[\"Proc\"]=\"Processor\"\nstringMap[\"QCor\"]=\"Quantum Core\"\nstringMap[\"SinC\"]=\"Singularity Container\"\nstringMap[\"SWar\"]=\"Solid Warhead\"\nstringMap[\"AGC\"]=\"Anti-Gravity Core\"\nstringMap[\"QAU\"]=\"Quantum Alignment Unit\"\nstringMap[\"AMCU\"]=\"Antimatter Core\"\nstringMap[\"Ant\"]=\"Antenna\"\nstringMap[\"ChmC\"]=\"Chemical Container\"\nstringMap[\"CmbC\"]=\"Combustion Chamber\"\nstringMap[\"FunP\"]=\"Functional Part\"\nstringMap[\"ConS\"]=\"Control System\"\nstringMap[\"CorS\"]=\"Core System\"\nstringMap[\"ElcE\"]=\"Electric Engine\"\nstringMap[\"FirS\"]=\"Firing System\"\nstringMap[\"GasC\"]=\"Gas Cylinder\"\nstringMap[\"IonC\"]=\"Ionic Chamber\"\nstringMap[\"LasC\"]=\"Laser Chamber\"\nstringMap[\"MgtR\"]=\"Magnetic Rail\"\nstringMap[\"MecS\"]=\"Mechanical Sensor\"\nstringMap[\"MslS\"]=\"Missile Silo\"\nstringMap[\"MobP\"]=\"Mobile Panel\"\nstringMap[\"PwrC\"]=\"Power Converter\"\nstringMap[\"RobA\"]=\"Robotic Arm\"\nstringMap[\"Scn\"]=\"Screen\"\nstringMap[\"Cas\"]=\"Casing\"\nstringMap[\"ReiF\"]=\"Reinforced Frame\"\nstringMap[\"StrP\"]=\"Structural Part\"\nstringMap[\"StdF\"]=\"Standard Frame\"\n--stringMap[\"Atmo\"]=\"Atmospheric\"\nstringMap[\"HnyR\"]=\"Honeycomb Rey\"\nstringMap[\"Ail\"]=\"Aileron\"\nstringMap[\"Hny\"]=\"Honeycomb\"\nstringMap[\"HnyP\"]=\"Pure Honeycomb\"\nstringMap[\"AtmoE\"]=\"Atmospheric Engine\"\nstringMap[\"SpcE\"]=\"Space Engine\"\nstringMap[\"Rar\"]=\"Rare\"\nstringMap[\"Mil\"]=\"Military\"\nstringMap[\"Mnv\"]=\"Maneuver\"\nstringMap[\"Frt\"]=\"Freight\"\nstringMap[\"Cont\"]=\"Container\"\nstringMap[\"CabM-\"]=\"Cable Model \"\nstringMap[\"RG\"]=\"Railgun\"\nstringMap[\"Mis\"]=\"Missile\"\nstringMap[\"AM\"]=\"Antimatter\"\nstringMap[\"Prec\"]=\"Precision\"\nstringMap[\"Hvy\"]=\"Heavy\"\nstringMap[\"Dfn\"]=\"Defense\"\nstringMap[\"ElMg\"]=\"ElectroMgntic\"\nstringMap[\"VBst\"]=\"Vertical Booster\"\nstringMap[\"HovE\"]=\"Hover engine\"\n--stringMap[\"CUn\"]=\"Core Unit\"\nstringMap[\"Fur\"]=\"Furniture\"\nstringMap[\"ExP\"]=\"Exceptional Part\"\nstringMap[\"Can\"]=\"Cannon\"\nstringMap[\"Kin\"]=\"Kinetic\"\nstringMap[\"Ther\"]=\"Thermic\"\nstringMap[\"Wing Tip\"]=\"Wingtip\"\nstringMap[\"Fuel-Tank\"]=\"Fuel Tank\"\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"-- Exported variable\ndebug = true --export: turn on/off debugging\ntick=60 --export: monitor tick in seconds\nmChannel=\"999\" --export: emitter channel for data\ntChannel=\"998\" -- export: emitter channel for time\nBackgroundColor = \"#1e1e1e\"\n--[[ Default colours are 34b1eb and 6e3de3]]\nPanelColour = \"99eeff\" --export Set the background color of the recipe Panel. YOU NEED TO LEAVE THE QUOTATION\nFontPanelColour = \"000000\" --export: Hex code for font colour of planet/locations panel (you need to include the quotes)\nLineHighlightColour = \"ccffff\"--export: Hex code for colour of highlighted lines in planet/location panel (you need to include the quotes)\n\n-- Globals\nelementIndList = {}\nsaveABList = false\nstockStr = \"\"\nindStr = \"\"\nemitterInd = 1\nemitterBufLen = 0\nemitterBuf={}\n--Locals\nlocal elementIndList = {}\nlocal version = \"0_0_1\"\n\nlocal panelColor = \"#\" ..PanelColour\nlocal MainFontColor = \"#\"  .. FontPanelColour\nlocal HighlightColor = \"#\"  .. LineHighlightColour\nlocal clickAreas = {}\nlocal panelLines = 13\nlocal elementMassList = {}\nlocal displayLine={}\nlocal displayMass={}\nlocal CurrentPage = 1\nlocal abbrevList={}\nlocal containerSizeTable ={ 400, 1281.31, 7421.35, 8000 }\n\nfunction string:map(delimiter,maxLen)\n  local result = { }\n  local from  = 1\n  if not(delimeter) then delimiter = \" \" end\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do\n    subStr = string.sub( self, from , delim_from-1 )\n    resultMap = stringMap[subStr]\n    if resultMap == nil or resultMap == \"\" then\n        resultMap = subStr\n    end\n    mapped = mapped..resultMap..\" \"\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  subStr = string.sub( self, from  )\n  resultMap = stringMap[subStr]\n  if resultMap == nil or resultMap == \"\" then\n    resultMap = subStr\n  end\n  mapped = mapped..resultMap\n  if maxLen > 0 and string.len(mapped) > maxLen then\n      return self\n  else\n      return mapped\n  end\nend\n\nfunction debugMsg(msg)\n\tif debug then\n\t\tsystem.print(msg)\n\tend\nend\n\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return boolean|nil, number|nil, number|nil\nlocal function extractBooleanJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([truefals]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n\n  if valueStr == \"true\" then\n    return true, startIndex, endIndex\n  elseif valueStr == \"false\" then\n    return false, startIndex, endIndex\n  else\n    return nil\n  end\nend\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue boolean|nil\n---@return boolean[]\nlocal function extractAllBooleanJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractBooleanJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return list|nil, number|nil, number|nil\nlocal function extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]*[]]..\"]\"..\"])\" --]]\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllStringJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*\"[^\"]*\"%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllNumberJsonValues (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*-?[0-9.e-]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\n---@param json string\n---@param key string\n---@return string\nlocal function deleteAllBooleanJsonValue (json, key)\n  local pattern = [[%s*\"]] .. key .. [[\"%s*:%s*[truefals]+%s*,?]]\n  return (gsub(json, pattern, \"\"))\nend\n\nfunction copyMenu()\n    if not(menudb == nil) then\n\t    local indexStr = menudb.getStringValue(\"recipeIndex\")\n\t    mapdb.setStringValue(\"recipeIndex\",indexStr)\n\telse\n\t    debugMsg(\"No menudb found\")\n\t\tunit.exit()\n\tend\n\tdebugMsg(\"Menu copy complete\")\nend\n\t\nfunction buildMapping()\n\telementIndList={}\n\telementMassList={}\n    local indexStr = menudb.getStringValue(\"recipeIndex\")\n\tlocal num        = ' *[+-]?%d+%.?%d*e?[+-]?%d*'\n    local pattern=[[\"([%w%s^\"%-]*)\",(]]..num..[[)]]\n    local startIndex, endIndex, eName, eMass = string.find(indexStr, pattern, 1)\n\n    repeat\n--\t\tdebugMsg(\"eName: \"..eName..\" eMass: \"..eMass)\n        if not(eName==nil) then\n            elementIndList[#elementIndList + 1] = eName\n\t\t\telementMassList[eName] = eMass\n        else\n            break\n        end\n        startIndex, endIndex, eName, eMass = string.find(indexStr, pattern, endIndex+1)\n    until (eName==nil)\n    \n    table.sort(elementIndList)\nend\n\nfunction getElementId (eName)\n\tfor i = 1,#elementIndList do\n\t\tif elementIndList[i]==eName then return i end\n\tend\n\treturn 0\nend\n\nfunction saveAbbrevList ()\n\tlocal jsonStr = \"[\"\n    local tmpStr = \"\"\n     local yc = 0\n\tlocal i = 1\n\tfor k,v in pairs(abbrevList) do\n\t\tif i > 1 then jsonStr = jsonStr..[[,]] end\n           if v.stock == nil then v.stock = 0 end\n           if v.mass == nil then v.mass = 0 end\n        tmpStr = [[{\"nm\":\"]]..elementIndList[k]..[[\",\"ab\":\"]]..v.abbrev..[[\",\"st\":]]..v.stock..[[,\"ms\":]]..v.mass..[[}]]\n          --system.print(tmpStr)\n        jsonStr = jsonStr..tmpStr\n          --yc = yc+1\n          --if yc > 5 then yc=0 coroutine.yield() end\n     end\n\tjsonStr = jsonStr..\"]\"\n    --system.print(jsonStr)\n\tmapdb.setStringValue(\"abbrevList\", jsonStr)\nend\n\nfunction loadAbbrevList ()\n    local yc=0\n\tabbrevList = {}\n\tlocal abbrevStr = mapdb.getStringValue(\"abbrevList\")\n     coroutine.yield()\n\tlocal nm=extractAllStringJsonValues(abbrevStr,\"nm\")\n     coroutine.yield()\n\tlocal ab=extractAllStringJsonValues(abbrevStr,\"ab\")\n     coroutine.yield()\n\tlocal st=extractAllNumberJsonValues(abbrevStr,\"st\")\n     coroutine.yield()\n\tlocal ms=extractAllNumberJsonValues(abbrevStr,\"ms\")\t\n     coroutine.yield()\n     --system.print(\"data loaded\")\n\tfor i = 1,#nm do\n\t\tlocal id = getElementId(nm[i])\n          if yc>20 then yc=0 coroutine.yield() end\n\t\tif id > 0 then\n\t\t\tlocal itemData={}\n\t\t\titemData.abbrev = ab[i]\n\t\t\titemData.stock = st[i]\n\t\t\titemData.mass = ms[i]\n\t\t\tabbrevList[id]=itemData\n\t\telse\n\t\t\tdebugMsg(\"Unknown element:\"..nm[i])\n\t\tend\n        yc=yc+1\n\tend\n\t--debugMsg(json.encode(abbrevList))\nend\n\nfunction updateItem(selected, abbrev, stock, mass)\n\tif abbrev==nil then system.print(\"No abbrev provided\") return end\n\tif stock==nil then stock=0 end\n\tif mass==nil then mass=elementMassList[elementIndList[selected]] end\n--debugMsg(\"selected:\"..selected..\" abbrev:\"..abbrev..\" stock:\"..stock..\" mass:\"..mass)\n\tif selected == \"\" then system.print(\"No item selected\")\n\telse\n\t\tlocal itemData={}\n\t\titemData.abbrev=abbrev\n\t\tif tonumber(stock)==0 then\n\t\t\tif abbrevList[selected]==nil or abbrevList[selected].stock == nil then\n\t\t\t\titemData.stock = 0\n\t\t\telse\n\t\t\t\titemData.stock =abbrevList[selected].stock\n\t\t\tend\n\t\telse\n\t\t\titemData.stock = tonumber(stock)\n\t\tend\n\t\titemData.mass = tonumber(mass)\n\t\tabbrevList[selected] = itemData\n\t\t--debugMsg(json.encode(abbrevList))\n\t\tsaveAbbrevList()\n\tend\n\tDrawList()\nend\n\nfunction commandLine(text)\n\tlocal num        = ' *[+-]?%d+%.?%d*e?[+-]?%d*'\n\tlocal pattern1=[[u '([%w%s^']*)']]\n\tlocal abbrev1 = string.match(text, pattern1, 1)\n\t\n\tif abbrev1== nil then system.print(\"Invalid command\") return end\n\t\n\tlocal pattern2=[[u '([%w%s^']*)',[%s]*(]]..num..[[),[%s]*(]]..num..[[)]]\n\tlocal abbrev2, stock2, mass2 = string.match(text, pattern2, 1)\n\n\tif mass2==nil then\n\t--debugMsg(\"here\")\n\t\tlocal pattern3=[[u '([%w%s^']*)',[%s]*(]]..num..[[)]]\n\t\tlocal abbrev3, stock3 = string.match(text, pattern3, 1)\n\t\n\t\tif stock3==nil then\n\t\t\t\t--debugMsg(\"here3\")\n\t\t\tupdateItem(lastSelected, abbrev1, nil, nil)\n\t\telse\n\t\t\t\t--debugMsg(\"here4\")\n\t\t\tupdateItem(lastSelected, abbrev1, stock3, nil)\n\t\tend\n\telse\n\t\t--debugMsg(\"here2\")\n\t\tupdateItem(lastSelected, abbrev1, stock2, mass2)\n\tend\nend\n\nfunction DrawSVG(output,screen) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = nil\n            break\n        end\n    end\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            --system.print(\"here\")\n            clickAreas[k] = newEntry\n            break\n        end\n    end\nend\n\nfunction DiableAllClickArea(activeScreen)\n    for k, v in pairs(clickAreas) do\n        if v.screen == activeScreen then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1,\n                screen = activeScreen\n            })\n        end\n    end\nend\n\nfunction DisableClickArea(candidate, activeScreen)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate and v.screen == activeScreen then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1,\n                screen = activeScreen\n            })\n            break\n        end\n    end\nend\n\nfunction InitiateClickAreas()\n    clickAreas = {}\n  \n    AddClickArea({id = \"PageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1, screen = \"screen1\"})\n    AddClickArea({id = \"PageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1, screen = \"screen1\"})\n    AddClickArea({id = \"ScrollBar\", x1 = -1, x2 = -1, y1 = -1, y2 = -1, screen = \"screen1\"})\n    for i = 1, panelLines do\n        AddClickArea({id = string.format(\"RList%d\",i), x1 = -1, x2 = -1, y1 = -1, y2 = -1, screen = \"screen1\"})\n    end\n\n\n\nend\n\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction clearLocDispList()\n    for i=1,pageLines do\n        displayLocationList[i] = \"\"\n    end\nend\n\nfunction CheckClick(x, y, HitTarget, Screen)\n    --debugMsg(\"screen:\".. Screen..\" x:\"..x..\" y:\"..y)\n    HitTarget = HitTarget or \"\"\n    if HitTarget == \"\" then\n        for k, v in pairs(clickAreas) do\n            if v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 and v.screen == Screen then\n                HitTarget = v.id\n                break\n            end\n        end\n    end\n\n    --debugMsg(\"HitTarget:\"..HitTarget)\n    if HitTarget == \"PageDown\" then\n        CurrentPage = CurrentPage+1\n        DrawList()\n    elseif HitTarget == \"PageUp\" then\n        CurrentPage = math.max(CurrentPage-1,0)\n        DrawList()\n    elseif HitTarget == \"ScrollBar\" then\n        CurrentPage = math.floor((y - 250)/pageBlockSize)\n        DrawList()\n\telse\n        for i = 1,panelLines do\n            if HitTarget == string.format(\"RList%s\",i) then\n                if displayLine[i] ~= \"\" then\n                    lastSelected = displayLine[i]\n\t\t\t     DrawList(i)\n                end\n            end\n        end\n    end\nend\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" height=\"1120\">\n                <defs><style>\n                      .ftitle { font-size: 60px; text-anchor: start;fill: white; }\n                      .fmstartg { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartp { font-size: 25px; text-anchor: start; fill:]]..BackgroundColor..[[;}\n                      .fmstarty { font-size: 25px; text-anchor: start; fill: #aaaa00;}\n                      .fmstartr { font-size: 25px; text-anchor: end; fill: #ff0000;}\n                      .fmmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fmmiddleb { font-size: 30px; text-anchor: middle; fill: black;}\n                      .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n                      .fmend { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                      .fmendg { font-size: 25px; text-anchor: end; fill: white;}\n                      .fmendy { font-size: 25px; text-anchor: end; fill: yellow;}\n                      .fmingreddesc { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                </style></defs>]]\n\nfunction DrawList(selected)\n    local panelW = 1820\n    local panelH = 800\n    local screenOutput = \"\"\n    if selected==nil then selected = 0 end\n    --DiableAllClickArea(\"screen1\")\n    \n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]..\n                       [[<text x=\"50\" y=\"100\" class=\"ftitle\">Crafting Recipes</text>]]..\n                       [[<text x=\"1700\" y=\"100\" class=\"fmstartr\">Version: ]]..version..[[</text>]]..\n                       [[<rect x=\"50\" y=\"150\" rx=\"10\" ry=\"10\" width=\"]]..panelW..[[\" height=\"]]..panelH..\n                       [[\" style=\"fill:]].. panelColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]..\n                       [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"]]..(panelW-60)..[[\" height=\"40\" style=\"fill:#33331a;\" />]]   ..   \n                       [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Recipes</text>]]..\n                       [[<rect x=\"]]..(panelW-3)..[[\" y=\"250\" width=\"50\" height=\"]]..(panelH-150)..[[\" style=\"red;\" />]]   \n           \n    local i = 0\n    for j = 1 + (CurrentPage - 1) * panelLines, panelLines +\n                (CurrentPage - 1) * panelLines, 1 do\n        i = i + 1\n        if j <= #elementIndList and j>0 then\n            UpdateClickArea(string.format(\"RList%d\",i), {\n                        id = string.format(\"RList%d\",i),\n                        x1 = 90,\n                        x2 = panelW-50,\n                        y1 = (150 + i * 55),\n                        y2 = (205 + i * 55),\n                        screen = \"screen1\"\n                    })\n            if i == selected then\n                screenOutput = screenOutput ..[[<rect x=\"70\" y=\"]]..(140 + i * 55) .. [[\" width=\"1800\" height=\"55\" style=\"fill:]].. HighlightColor  .. [[;\" />]]\n            end\n            screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%30s\", elementIndList[j]:map()) .. [[</text>]]\n            displayLine[i]=j\n\t\t\t\n\t\t\tif abbrevList[j]==nil or abbrevList[j].abbrev == nil then\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"800\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%30s\", elementIndList[j]) .. [[</text>]]\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"1500\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   \"0\" .. [[</text>]]\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"1650\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   elementMassList[elementIndList[j]] .. [[</text>]]\n\n\n\t\t\telse\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"800\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%30s\", abbrevList[j].abbrev) .. [[</text>]]\t\t\t\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"1500\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   abbrevList[j].stock .. [[</text>]]\n\t\t\t\tscreenOutput = screenOutput .. [[<text x=\"1650\" y=\"]] ..(180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   abbrevList[j].mass .. [[</text>]]\n\t\t\tend\n        else\n            displayLine[i]=0\n        end\n    end\n\n    if #elementIndList > panelLines then\n        pageBlockSize = (panelH-160) / (#elementIndList / panelLines)\n        scrollStart = math.floor(CurrentPage*pageBlockSize)\n\n        screenOutput = screenOutput ..                       \n            [[<rect x=\"]]..(panelW-3)..[[\" y=\"]]..(250+scrollStart)..[[\" width=\"50\" height=\"]]..(pageBlockSize)..[[\" style=\"fill:]]..panelColor..[[;\" />]]   \n        UpdateClickArea(\"ScrollBar\", {\n                        id = \"ScrollBar\",\n                        x1 = panelW,\n                        x2 = panelW+45,\n                        y1 = 251,\n                        y2 = panelH+99,\n                        screen = \"screen1\"\n                    })\n        if CurrentPage < math.ceil(#elementIndList / panelLines) then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..panelW..[[\" y=\"]]..(panelH+100)..[[\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..panelColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"PageDown\", {\n                        id = \"PageDown\",\n                        x1 = panelW,\n                        x2 = panelW+45,\n                        y1 = panelH+100,\n                        y2 = panelH+150,\n                        screen = \"screen1\"\n                    })\n        else\n            DisableClickArea(\"PageDown\")\n        end\n\n        if #elementIndList > 1 and CurrentPage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"]]..panelW..[[\" y=\"200\">\n                                <rect x=\"0\" y=\"0\" width=\"45\" height=\"50\" style=\"fill:]]..panelColor..[[;\" />\n                                <svg x=\"0\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg></svg>]]\n            UpdateClickArea(\"PageUp\", {\n                        id = \"PageUp\",\n                        x1 = panelW,\n                        x2 = panelW+45,\n                        y1 = 200,\n                        y2 = 250,\n                        screen = \"screen1\"\n                    })\n        else\n            DisableClickArea(\"PageUp\")\n        end\n    end\n    screenOutput = screenOutput .. [[</svg>]]\n    DrawSVG(screenOutput,screen1)\nend\n\ncontainMass={}\ncontainMass[\"hub\"]=55.8\ncontainMass[\"xs\"]=229.09\ncontainMass[\"s\"]=1280.31\ncontainMass[\"m\"]=7420\ncontainMass[\"l\"]=14840\ncontainMass[\"xl\"]=44210\ncontainMass[\"el\"]=88410\n\nfunction getContainerSizeById(uid)\n    local eHP = core.getElementMaxHitPointsById(uid)\n\tif eHP < 100 then return \"hub\"\n\telseif eHP < 800 then return \"sx\"\n\telseif eHP < 7000 then return \"s\"\n\telseif eHP < 16000 then return \"m\"\n\telseif eHP < 33000 then return \"l\"\n\telseif eHP < 60000 then return \"xl\"\n\telse return \"exl\"\n\tend\n \nend\n\nfunction isStockContainer ( uidName )\n\tfor k,v in pairs(abbrevList) do\n\t\tif uidName == v.abbrev or uidName == elementIndList[k] then return k end\n    end\n--\tfor k,v in pairs(elementIndList) do\n--\t\tif uidName == v then return k end\n--    end\n\treturn 0\nend\n\nfunction monitorStock()\n    local stockJson = \"\"\n    local uids = core.getElementIdList()\n\tlocal stockTotal = {}\n\tlocal yc=0\n    for _, uid in ipairs(uids) do\n    \tlocal uidType = string.lower(core.getElementTypeById(uid))\n    \tif uidType == \"container\" then\n            local uidName = string.lower(core.getElementNameById(uid))\n            local stock = isStockContainer(uidName)\n      \t\tif stock > 0 then\n\t\t\t\tlocal eSize = getContainerSizeById(uid)\n\t\t\t\tlocal eMass = containMass[eSize]\n\t\t\t\t--debugMsg(\"eMass:\"..eMass)\n\t\t\t\tlocal stockMass = abbrevList[stock].mass or elementMassList[elementIndList[stock]]\n\t\t\t\t--debugMsg(\"stockMass:\"..stockMass)\n\t\t\t\tlocal stockVolume = (core.getElementMassById(uid) - eMass)\n\t\t\t\t\t\t\t/ stockMass\n\t\t\t\t--debugMsg(\"stockVolume:\"..stockVolume)\n\t\t\t\tif stockTotal[stock] == nil then stockTotal[stock]=0 end\n\t\t\t\tstockTotal[stock] = stockTotal[stock]+stockVolume\n\t\t\t\t--debugMsg(\"stockTotal[stock]:\"..stockTotal[stock])\n\t\t\tend\n\t\tend\n          if yc> 50 then yc=0 coroutine.yield() end\n\t\tyc=yc+1\n    end\n\t\n    stockJson = \"[\"\n\ti=0\n    for k,v in pairs(stockTotal) do\n        if i > 1 then stockJson = stockJson .. [[,]] end\n        stockJson = stockJson .. [[{\"name\":\"]]..elementIndList[k]..[[\",\"stock\":]]..\n            math.floor(v+0.5)..[[,\"flag\":]]\n\t\tif v < abbrevList[k].stock/4 then\n            stockJson = stockJson .. [[\"C\"]]\n        elseif v < abbrevList[k].stock/2 then\n            stockJson = stockJson .. [[\"W\"]]\n        else\n            stockJson = stockJson .. [[\"N\"]]\n        end\n        stockJson = stockJson .. [[}]]\n        i=i+1\n        if yc> 50 then yc=0 coroutine.yield() end\n\t   yc=yc+1\n    end\n    stockJson = stockJson .. \"]\"\n\treturn stockJson\nend\n\nfunction string:split(delimiter,maxLen)\n    --system.print(\"Self:\"..self)\n  if not(delimeter) then delimiter = \" \" end\n  local result = { }\n  local from  = 1\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do   \n    table.insert( result, string.sub( self, from , delim_from-1 ) )\n    subStr = string.sub( self, from , delim_from-1 )\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  table.insert( result, string.sub( self, from  ) )\n  subStr = string.sub( self, from  )\n  return result\nend\n\nlocal industries = {}\nindustries[#industries+1] = \"electronics\"\nindustries[#industries+1] = \"metalwork\"\nindustries[#industries+1] = \"glass\"\nindustries[#industries+1] = \"smelter\"\nindustries[#industries+1] = \"refiner\"\nindustries[#industries+1] = \"recycler\"\nindustries[#industries+1] = \"chemical\"\nindustries[#industries+1] = \"assembly\"\nindustries[#industries+1] = \"3d\"\n\nfunction isIndustry(elem)\n    for i=1,#industries do\n        if elem == industries[i] then return true end\n    end\n    return false\nend\n\nfunction indTime(time)\n   if time < 1 then return \"0 sec\"\n   elseif time < 120 then return string.format(\"%d secs\", math.floor(time))\n   elseif time < (120*60) then return string.format(\"%d mins\", math.floor(time/60))\n   elseif time < (120*60*60) then return string.format(\"%d hours\", math.floor(time/(60*60)))\n   elseif time < (120*60*60*24) then return string.format(\"%d days\", math.floor(time/(60*60*24)))\n   else \n        return \"unknown\"\n   end\nend\n\nfunction monitorIndustry()\n    local uids = core.getElementIdList()\n    local words = {}\n    local industryJson = \"\"\n\tlocal yc=0\n\n    for _, uid in ipairs(uids) do\n        local uidName = string.lower(core.getElementNameById(uid))\n        local uidType = string.lower(core.getElementTypeById(uid))\n        --system.print(uidType)\n        local words=uidType:split()\n        --system.print(json.encode(words))\n        if not(words == nil) and #words > 1 then\n--            local uidState = \"\"\n--            local uidSchemaId = 0\n            if isIndustry(words[2]) then\n                local uidStatusStr = core.getElementIndustryStatus(uid)\n                --system.print(\"Ind Status:\"..uidStatusStr)\n                local uidState = extractStringJsonValue(uidStatusStr,\"state\",1)\n                local uidSchemaId = extractNumberJsonValue(uidStatusStr,\"schematicId\",1)\n                local uidTime = extractNumberJsonValue(uidStatusStr,\"remainingTime\",1)\n                --if uidState == \"RUNNING\" then\n                --    system.print(uidName..\" / \"..uidTime.. \"(\"..indTime(uidTime)..\")\")\n                --end\n                --system.print(\"Ind Data=\"..uidStatusStr)\n                if uidState and not(uidState == \"STOPPED\") then\n                    local schemaStr = core.getSchematicInfo(uidSchemaId)\n                    --system.print(\"Schema Data=\"..schemaStr)\n                    local uidProducts = extractListJsonValue(schemaStr,\"products\",1)\n                    local uidSchema = extractStringJsonValue(uidProducts,\"name\",1)\n                    if industryJson == \"\" then industryJson = \"[\" else industryJson = industryJson..\",\" end\n                    industryJson = industryJson .. \"{\" ..\n                        [[\"uid\":]] .. uid ..[[,]]..\n                        [[\"time\":\"]] .. indTime(uidTime) ..[[\",]]..\n                        [[\"name\":\"]] .. uidName ..[[\",]]..\n                        [[\"type\":\"]] .. uidType ..[[\",]]..\n                        [[\"state\":\"]] .. uidState ..[[\",]]..\n                        [[\"schema\":\"]] .. uidSchema ..[[\"}]]\n                    \n                end\n            end\n        end\n\t\tif yc> 50 then yc=0 coroutine.yield() end\n\t\tyc=yc+1\n    end\n    if not(industryJson == \"\") then industryJson = industryJson .. \"]\" else industryJson = \"[]\" end\n\treturn industryJson\nend\n\nfunction transmitData (dataType, data)\n\tlocal packetSize = 150\n\tlocal packetStart = 1\n\tlocal i=0\n   \n\t   emitterBuf[emitterBufLen+1] = \"&&&[\"..dataType..\"][\"..string.len(data)..\"]\"\n        emitterBufLen=emitterBufLen+1\n\n\n    for packetStart=1,string.len(data),packetSize do\n        packet = string.sub(data,packetStart, packetStart+packetSize-1)\n        packet=string.gsub(packet,[[\"]],[[\\\"]])\n\t   emitterBuf[emitterBufLen+1] = packet\n        emitterBufLen=emitterBufLen+1\n        i=i+1\n\tend\n        packet = string.sub(data,(packetSize*(i-1))+1)\n        packet=string.gsub(packet,[[\"]],[[\\\"]])\n\t   emitterBuf[emitterBufLen+1] = packet\n        emitterBufLen=emitterBufLen+1\n    \n\t   emitterBuf[emitterBufLen+1] = \"###[\"..dataType..\"][\"..dataTime()..\"]\"\n        emitterBufLen=emitterBufLen+1\nend\n\nhour_offset = 0\n\nfunction dataTime()\n  \n  local n=system.getTime()\n  n = n - hour_offset * 3600  \n  \n  -- n to d,h,m,s  \n  local day = math.floor(n / (24*3600))\n  n = n % (24 * 3600)\n  local hour = math.floor(n / 3600)\n  n = n % 3600\n  local minutes = math.floor(n / 60)\n  n = n % 60\n  local seconds = math.floor(n)\n  \n  -- h,m,s to text   \n  hour_text = tostring(hour)    \n  if string.len(hour_text) <2 then   hour_text = \"0\"..hour_text end\n  \n  minutes_text = tostring(minutes)    \n  if string.len(minutes_text) <2 then   minutes_text = \"0\"..minutes_text end  \n  \n  seconds_text = tostring(seconds)\n  if string.len(seconds_text) <2 then   seconds_text = \"0\"..seconds_text end         \n\n  return hour_text..\":\"..minutes_text..\":\"..seconds_text..\" UTC+3\"\nend\n\nfunction loadMyMapping()\n    coroutine.yield()\n    yc=0\n    saveABList = false\n    for k,v in pairs(storeMap) do\n        debugMsg(\"loading:\"..v)\n        local id = getElementId(k)\n        if id>0 and not(listStockContainers[v]==nil) then\n            local itemData={}\n            itemData.abbrev = v\n            itemData.stock = listStockContainers[v][4]\n            itemData.mass = listStockContainers[v][1]\n            abbrevList[id] = itemData\n        end\n        if yc>20 then yc=0 coroutine.yield() end\n    end\n    saveAbbrevList()\nend\n\nInitiateClickAreas()\nbuildMapping()\n\nstartupRunning = false\nfunction startup()\n    --system.print(\"starting\")\n    startupRunning = true\n    startupWrap = coroutine.create(function ()\n            system.print(\"startup now\")\n\n        loadAbbrevList()\n            system.print(\"loading abbrev complete\")\n        DrawList(0)\n        unit.setTimer(\"monitor\",tick)\n        unit.setTimer(\"emitter\",0.1)\n        unit.setTimer(\"heartbeat\",5)\n        unit.stopTimer(\"startup\")\n        startupRunning = false\n            system.print(\"System Running\")\n    end)\nend\n\nmonitoring = false\nfunction monitorData()\n    monitoring = true\n    monWrap = coroutine.create(function ()\n\t    stockStr = monitorStock()\n         transmitData(\"Stock\", stockStr)\n\t    indStr = monitorIndustry()\n         transmitData(\"Industry\", indStr)\n         monitoring = false\n        end)\nend\n\nfunction eventHandler(event)   \n    --system.print(\"event:\"..event)\n    if startupRunning then coroutine.resume(startupWrap)\n    elseif monitoring then coroutine.resume(monWrap)\n    else \n    end\n    if event == \"emitter\" then\n        if emitterInd < emitterBufLen then\n            emitter.send(mChannel, emitterBuf[ emitterInd ])\n            emitterBuf[ emitterInd ]={}\n            emitterInd=emitterInd+1\n        end\n    elseif event==\"monitor\" then monitorData()\n    elseif event==\"heartbeat\" then \n        if mapdb.load() < 1 then\n            system.print(\"Core Server out of range, shutting down\")\n            unit.exit()\n        end\n    end\nend\n\nstartup()\nunit.setTimer(\"startup\",1)\nunit.hide()\n\n\n\n\n\n\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"\neventHandler(timerId)","filter":{"args":[{"variable":"*"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"commandLine(text)","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"4"}],"methods":[],"events":[]}
