{"slots":{"0":{"name":"commsdb","type":{"events":[],"methods":[]}},"1":{"name":"screen1","type":{"events":[],"methods":[]}},"2":{"name":"elementDB","type":{"events":[],"methods":[]}},"3":{"name":"screen3","type":{"events":[],"methods":[]}},"4":{"name":"commsdb","type":{"events":[],"methods":[]}},"5":{"name":"commsdb","type":{"events":[],"methods":[]}},"6":{"name":"core","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- this code goes in the screen.mousedown(*,*) trigger\n\nclickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY)\n","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"1"},"key":"0"},{"code":"response = commsdb.getStringValue(\"Res\"..channel)\n\nif not(response == nil) and not(response == \"\") then\n\n    system.print(\"Response\"..response)\n    if response == \"Unknown\" then\n    \tcommsdb.setStringValue(\"Res\"..channel,\"\")\n    \tunit.stopTimer(\"sendReq\")\n    \tprocessingRecipe = false\n         recipeSize = recipeSize+1\n    else\n        curRecipe = buildRecipe(response)\n        system.print(\"eMass:\"..eMass[nextRecipe])\n        local massRange = 0.1*eMass[nextRecipe]\n        if curRecipe.ms > eMass[nextRecipe]-massRange and curRecipe.ms < eMass[nextRecipe]+massRange then\n            --system.print(\"Found:\"..curRecipe.nm)\n            eType[nextRecipe]=curRecipe.nm\n            commsdb.setStringValue(\"Res\"..channel,\"\")\n   \t\t  costStr = commsdb.getStringValue(\"oreCost\"..channel)\n            if not(costStr == nil) and not(costStr == \"\") then\n                --system.print(\"Ore Cost:\"..costStr)\n                eOre[nextRecipe] = json.decode(costStr)\n                eCost[nextRecipe]=elementCost(eOre[nextRecipe])\n                --system.print(\"Cost=\"..eCost[nextRecipe])\n                commsdb.setStringValue(\"oreCost\"..channel,\"\")\n                unit.stopTimer(\"sendReq\")\n                DrawScreen()\n                processingRecipe = false\n                recipeSize = 1\n                nextRecipe = nextRecipe+1\n            end\n        else\n            commsdb.setStringValue(\"Res\"..channel,\"\")\n            unit.stopTimer(\"sendReq\")\n            processingRecipe = false\n            recipeSize = recipeSize+1\n        end\n    end\nend\n\n\n","filter":{"args":[{"value":"sendReq"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"stores = require('cpml.stores')\n\nfunction string:map(delimiter,maxLen)\n  local result = { }\n  local from  = 1\n  if not(delimeter) then delimiter = \" \" end\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do\n    subStr = string.sub( self, from , delim_from-1 )\n    resultMap = stringMap[subStr]\n    if resultMap == nil or resultMap == \"\" then\n        resultMap = subStr\n    end\n    mapped = mapped..resultMap..\" \"\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  subStr = string.sub( self, from  )\n  resultMap = stringMap[subStr]\n  if resultMap == nil or resultMap == \"\" then\n    resultMap = subStr\n  end\n  mapped = mapped..resultMap\n  if maxLen > 0 and string.len(mapped) > maxLen then\n      return self\n  else\n      return mapped\n  end\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"function initiateRequiredLibaries()\n    json = require('dkjson')\n    store = require('cpml.stores')\nend\nif pcall(initiateRequiredLibaries) then\n    system.print(\"Libaries loaded successfully\")\n    else\n    system.print(\"Libaries failed to load: check that the following libraries exist:\")\n    system.print(\"(<ProgrmData> is the directory in to which you installed DU)\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n    system.print(\"\")\n    unit.exit()\nend\n\n--jsa = require('cpml/json-a')\n\nversion = \"1_0_0\"\ndisplayElementList = {}\nchannel = 5 --export: PB channel ID (1 to 5)\nlocal BackgroundColor = \"#1e1e1e\"\n--[[ Default colours are 34b1eb and 6e3de3]]\nlocal RecPanelColour = \"99eeff\" --export Set the background color of the recipe Panel. YOU NEED TO LEAVE THE QUOTATION\nlocal IngPanelColour = \"aa99ff\" --export Set the background color of the Igredients panel. YOU NEED TO LEAVE THE QUOTATION\nlocal FontPanelColour = \"000000\" --export: Hex code for font colour of planet/locations panel (you need to include the quotes)\nlocal LineHighlightColour = \"ccffff\"--export: Hex code for colour of highlighted lines in planet/location panel (you need to include the quotes)\n\nlocal RecipeBackgroundColor = \"#\" ..RecPanelColour\nlocal IngredBackgroundColor = \"#\" ..IngPanelColour\nlocal MainFontColor = \"#\"  .. FontPanelColour\nlocal HighlightColor = \"#\"  .. LineHighlightColour\nlocal clickAreas = {}\nlocal ingredList={}\nlocal lastRecipeSelected = \"\"\nlocal recipeLines=12\nlocal CurrentRecipePage = 1\nlocal indexCount=0\neType={}\neName={}\neMass={}\neCount={}\neCost={}\neOre={}\n\n-- default ore prices on the market\ncostBauxite    = 25  --export\ncostCoal       = 25  --export\ncostQuartz     = 25  -- export\ncostHematite   = 25  -- export\ncostChromite   = 53  --export\ncostMalachite  = 54  --export\ncostLimestone  = 54  -- export\ncostNatron     = 53  -- export\ncostPetalite   = 75 --export\ncostGarnierite = 80  --export\ncostAcanthite  = 75 -- export\ncostPyrite     = 90  -- export\ncostCobaltite  = 450 --export\ncostCryolite   = 450 --export\ncostKolbeckite = 350 -- export\ncostGold       = 350 -- export\ncostRhodonite  = 400 --export\ncostColumbite  = 1000--export\ncostVanadinite = 1000-- export\ncostIllmenite  = 1000-- export\n\nmarketMarkup = 1.5 --export: market prices compared to ore price\n\nreqType = \"R\"\ncalcComplete = false\n        \nfunction commerise(amount)\n  local formatted = amount\n  while true do  \n    formatted, k = string.gsub(formatted, \"^(-?%d+)(%d%d%d)\", '%1,%2')\n    if (k==0) then\n      break\n    end\n  end\n  return formatted\nend\n\nfunction string:split(delimiter,maxLen)\n    --system.print(\"Self:\"..self)\n  if not(delimeter) then delimiter = \" \" end\n  local result = { }\n  local from  = 1\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do   \n    table.insert( result, string.sub( self, from , delim_from-1 ) )\n    subStr = string.sub( self, from , delim_from-1 )\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  table.insert( result, string.sub( self, from  ) )\n  subStr = string.sub( self, from  )\n  return result\nend\n\nrstringMap = {}\nfunction reverseStores()\n    for k,v in pairs(stringMap) do\n        rstringMap[v]=k\n    end\nend\nreverseStores()\nrstringMap[\"Basic \"]=\"\"\nfunction string:rmap()\n    local rmapStr = self\n    for k,v in pairs(rstringMap) do\n        local tmpStr = string.gsub(rmapStr,k,v)\n        if not(tmpStr == nil) then\n            rmapStr = tmpStr\n        end\n    end\n    rmapStr = string.gsub(\" \"..rmapStr, \"%W%l\", string.upper):sub(2)\n    return rmapStr\nend\n\nfunction buildRecipe(recipeStr)\n     return json.decode(recipeStr)\nend\n\nfunction reqRecipe(recipeName)\n    recipeName = string.gsub(recipeName, \"Bsc \",\"\")\n    system.print(\"Requesting:\"..recipeName)\n    reqType = \"R\"\n    commsdb.setStringValue(\"Req\"..channel,recipeName)\n    unit.setTimer(\"sendReq\",0.5)\nend\n\nrecipeQueue={}\nnextRecipe=1\nfunction qRecipe(recipeName)\n    for i=nextRecipe,#recipeQueue do\n        if recipeQueue[i] == recipeName then return 0 end\n    end\n    recipeQueue[#recipeQueue+1]=recipeName\nend\n\nfunction DrawSVG(output,screen) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = nil\n            break\n        end\n    end\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = newEntry\n            break\n        end\n    end\nend\n\nfunction DisableClickArea(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1\n            })\n            break\n        end\n    end\nend\n\nfunction InitiateClickAreas()\n    clickAreas = {}\n  \n    AddClickArea({id = \"RecipePageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"RecipePageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\nend\nInitiateClickAreas()\n\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction clearLocDispList()\n    for i=1,pageLines do\n        displayLocationList[i] = \"\"\n    end\nend\n\nfunction CheckClick(x, y, HitTarget)\n    HitTarget = HitTarget or \"\"\n    if HitTarget == \"\" then\n        for k, v in pairs(clickAreas) do\n            if v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 then\n                HitTarget = v.id\n                break\n            end\n        end\n    end\n  \n    system.print(\"Target Hit = \"..HitTarget)\n    \n    if HitTarget == \"RecipePageDown\" then\n        CurrentRecipePage = CurrentRecipePage+1\n        DrawScreen()\n    elseif HitTarget == \"RecipePageUp\" then\n        CurrentRecipePage = math.max(CurrentRecipePage-1,0)\n        DrawScreen()\n    end\nend\n\n-----------------------------------------------\n-- More efficient JSON parsing using pattern matching - avids cpu overloads\n-----------------------------------------------\n\nlocal function extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]*[]]..\"]\"..\"])\"\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return list|nil, number|nil, number|nil\nlocal function extractListJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]*[]]..\"]\"..\"])\"\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nfunction loadElementList ()\n    local elementStr = elementDB.getStringValue(\"shipElements\")\n    eType = extractAllStringJsonValues(elementStr,\"eType\")\n    eMass = extractAllNumberJsonValues(elementStr,\"eMass\")\n    eCount = extractAllNumberJsonValues(elementStr,\"eCount\")\n\nend\n\nfunction newOreAmount()\n\n    local ore={}\n\n    ore.amount={}\n    ore.amount[\"Bauxite\"]=0\n    ore.amount[\"Coal\"]=0\n    ore.amount[\"Quartz\"]=0\n    ore.amount[\"Hematite\"]=0\n    ore.amount[\"Chromite\"]=0\n    ore.amount[\"Malachite\"]=0\n    ore.amount[\"Limestone\"]=0\n    ore.amount[\"Natron\"]=0\n    ore.amount[\"Petalite\"]=0\n    ore.amount[\"Garnierite\"]=0\n    ore.amount[\"Acanthite\"]=0\n    ore.amount[\"Pyrite\"]=0\n    ore.amount[\"Cobaltite\"]=0\n    ore.amount[\"Cryolite\"]=0\n    ore.amount[\"Kolbeckite\"]=0\n    ore.amount[\"Gold Nuggets\"]=0\n    ore.amount[\"Rhodonite\"]=0\n    ore.amount[\"Columbite\"]=0\n    ore.amount[\"Illmenite\"]=0\n    ore.amount[\"Vanadinite\"]=0\n    ore.amount[\"O2P\"]=0\n    ore.amount[\"HP\"]=0\n    return ore\nend\n\nfunction addOreAmount(ore1, ore2)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Adding: \"..i..\"(\"..ore1.amount[i]..\"+\"..ore2.amount[i]..\")\")\n        ore.amount[i]=ore1.amount[i]+ore2.amount[i]\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend\n\nfunction multiplyOreAmount(ore1, factor)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Multi: \"..i..\"(\"..ore1.amount[i]..\"*\"..factor..\")\")\n        ore.amount[i]=ore1.amount[i]*factor\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend    \n\nfunction elementCost(oreCost)\n--system.print(\"orecost=\"..json.encode(oreCost))\n    if oreCost and not(oreCost==\"\") then\n        local totalCost = 0\n        local oreList={}\n        local priceList={}\n        if oreCost.amount[\"Bauxite\"] > 0 then \n            oreList[#oreList+1]=\"Bauxite\"\n            priceList[#priceList+1]=costBauxite\n        end\n        if oreCost.amount[\"Quartz\"] > 0 then \n            oreList[#oreList+1]=\"Quartz\" \n            priceList[#priceList+1]=costQuartz\n        end\n        if oreCost.amount[\"Hematite\"] > 0 then \n            oreList[#oreList+1]=\"Hematite\" \n            priceList[#priceList+1]=costHematite\n        end\n        if oreCost.amount[\"Coal\"] > 0 then \n            oreList[#oreList+1]=\"Coal\" \n            priceList[#priceList+1]=costCoal\n        end\n        \n        if oreCost.amount[\"Chromite\"] > 0 then \n            oreList[#oreList+1]=\"Chromite\" \n            priceList[#priceList+1]=costChromite\n        end\n        if oreCost.amount[\"Malachite\"] > 0 then \n            oreList[#oreList+1]=\"Malachite\" \n            priceList[#priceList+1]=costMalachite\n        end\n        if oreCost.amount[\"Limestone\"] > 0 then \n            oreList[#oreList+1]=\"Limestone\" \n            priceList[#priceList+1]=costLimestone\n        end\n        if oreCost.amount[\"Natron\"] > 0 then \n            oreList[#oreList+1]=\"Natron\" \n            priceList[#priceList+1]=costNatron\n        end\n                \n        if oreCost.amount[\"Petalite\"] > 0 then \n            oreList[#oreList+1]=\"Petalite\" \n            priceList[#priceList+1]=costPetalite\n        end\n        if oreCost.amount[\"Garnierite\"] > 0 then \n            oreList[#oreList+1]=\"Garnierite\" \n            priceList[#priceList+1]=costGarnierite\n        end\n        if oreCost.amount[\"Acanthite\"] > 0 then \n            oreList[#oreList+1]=\"Acanthite\" \n            priceList[#priceList+1]=costAcanthite\n        end\n        if oreCost.amount[\"Pyrite\"] > 0 then \n            oreList[#oreList+1]=\"Pyrite\" \n            priceList[#priceList+1]=costPyrite\n        end\n        \n        if oreCost.amount[\"Cobaltite\"] > 0 then \n            oreList[#oreList+1]=\"Cobaltite\" \n            priceList[#priceList+1]=costCobaltite\n        end\n        if oreCost.amount[\"Cryolite\"] > 0 then \n            oreList[#oreList+1]=\"Cryolite\" \n            priceList[#priceList+1]=costCryolite\n        end\n        if oreCost.amount[\"Kolbeckite\"] > 0 then \n            oreList[#oreList+1]=\"Kolbeckite\" \n            priceList[#priceList+1]=costKolbeckite\n        end\n        if oreCost.amount[\"Gold Nuggets\"] > 0 then \n            oreList[#oreList+1]=\"Gold Nuggets\" \n            priceList[#priceList+1]=costGold\n        end\n\n        if oreCost.amount[\"Rhodonite\"] > 0 then \n            oreList[#oreList+1]=\"Rhodonite\" \n            priceList[#priceList+1]=costRhodonite\n        end\n        if oreCost.amount[\"Columbite\"] > 0 then \n            oreList[#oreList+1]=\"Columbite\" \n            priceList[#priceList+1]=costColumbite\n        end\n        if oreCost.amount[\"Illmenite\"] > 0 then \n            oreList[#oreList+1]=\"Illmenite\" \n            priceList[#priceList+1]=costIllmenite\n        end\n        if oreCost.amount[\"Vanadinite\"] > 0 then \n            oreList[#oreList+1]=\"Vanadinite\" \n            priceList[#priceList+1]=costVanadinite\n        end\n        for i=1,#oreList do\n            ocost = oreCost.amount[oreList[i]]*priceList[i]\n            totalCost = totalCost + ocost\n        end\n        return totalCost\n    else\n        return 0\n    end\nend\n\nfunction orePrice(ore)\n    if ore==\"Bauxite\" then return costBauxite\n    elseif ore==\"Quartz\" then return costQuartz\n    elseif ore==\"Hematite\" then return costHematite\n    elseif ore==\"Coal\" then return costCoal\n    elseif ore==\"Chromite\" then return costChromite\n    elseif ore==\"Malachite\" then return costMalachite\n    elseif ore==\"Limestone\" then return costLimestone\n    elseif ore==\"Natron\" then return costNatron\n    elseif ore==\"Petalite\" then return costPetalite\n    elseif ore==\"Garnierite\" then return costGarnierite\n    elseif ore==\"Acanthite\" then return costAcanthite\n    elseif ore==\"Pyrite\" then return costPyrite\n    elseif ore==\"Cobaltite\" then return costCobaltite\n    elseif ore==\"Cryolite\" then return costCryolite\n    elseif ore==\"Kolbeckite\" then return costKolbeckite\n    elseif ore==\"Gold Nuggets\" then return costGold\n    elseif ore==\"Rhodonite\" then return costRhodonite\n    elseif ore==\"Columbite\" then return costColumbite\n    elseif ore==\"Illmenite\" then return costIllmenite\n    elseif ore==\"Vanadinite\" then return costVanadinite\n    else system.print(\"unknown ore: \"..ore) return 0\n    end\n\nend\n\n-----------------------------------------------\n-- Code for building screen content and displaying it\n-----------------------------------------------\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" height=\"1120\">\n                <defs><style>\n                      .ftitle { font-size: 60px; text-anchor: start;fill: white; }\n                      .ftitlew { font-size: 60px; text-anchor: start;fill: red; }\n                      .ftitle2 { font-size: 60px; text-anchor: start;fill: #565656; }\n                      .ftopmiddle { font-size: 40px; text-anchor: middle;}\n                      .ftopend { font-size: 40px; text-anchor: end;}\n                      .fcapstart { font-size: 30px; text-anchor: start; fill: white;}\n                      .fcapstarthy { font-size: 30px; text-anchor: start; fill: yellow;}\n                      .fcapstarthr { font-size: 30px; text-anchor: start; fill: red;}\n                      .fcapmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fcapend { font-size: 30px; text-anchor: end; fill: #1e1e1e;}\n                      .fcapendw { font-size: 30px; text-anchor: end; fill: white;}\n                      .fmstart { font-size: 25px; text-anchor: start; fill: white;}\n                      .fmstartr { font-size: 25px; text-anchor: start; fill: red;}\n                      .fmschema { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmschemag { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                      .fmdesc { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartg { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartp { font-size: 25px; text-anchor: start; fill:]]..RecipeBackgroundColor..[[;}\n                      .fmstartl { font-size: 25px; text-anchor: start; fill:]]..IngredBackgroundColor..[[;}\n                      .fmstarty { font-size: 25px; text-anchor: start; fill: #aaaa00;}\n                      .fmmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fmmiddleb { font-size: 30px; text-anchor: middle; fill: black;}\n                      .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n                      .fmend { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                      .fmendg { font-size: 25px; text-anchor: end; fill: white;}\n                      .fmendy { font-size: 25px; text-anchor: end; fill: yellow;}\n                      .fmingreddesc { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                </style></defs>]]\n\nfunction DrawScreen()   \n\t\n    local screenOutput = \"\"\n\n        -- Draw Header\n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"70\" y=\"120\" class=\"ftitle\">Ship Valuation</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1700\" y=\"120\" class=\"fmstartr\">Version: ]]..version..[[</text>]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"150\" rx=\"10\" ry=\"10\" width=\"1100\" height=\"]] ..\n                       ((recipeLines + 1) * 55) ..\n                       [[\" style=\"fill:]].. RecipeBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"1090\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Elements</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"800\" y=\"191\" class=\"fmendg\">Count</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"950\" y=\"191\" class=\"fmendg\">Unit $</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1100\" y=\"191\" class=\"fmendg\">Total $</text>]]\n           \n    local indexCount=#eType\n    local i = 0\n    for j = 1 + (CurrentRecipePage - 1) * recipeLines, recipeLines +\n                (CurrentRecipePage - 1) * recipeLines, 1 do\n        i = i + 1\n        if j <= #eType and j>0 then\n            screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]]..\"[\" ..\n                                   j .. \"]\"..[[</text>]]\n            screenOutput = screenOutput .. [[<text x=\"180\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%30s\", eType[j]:rmap()) .. [[</text>]]\n            screenOutput = screenOutput .. [[<text x=\"800\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(eCount[j])) .. [[</text>]]\n            if not(eCost[j]==nil) and eCost[j] > 0 then\n                screenOutput = screenOutput .. [[<text x=\"950\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(math.floor(eCost[j]))) .. [[</text>]]\n                screenOutput = screenOutput .. [[<text x=\"1100\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(math.floor(eCount[j]*eCost[j]))) .. [[</text>]]\n            else\n                screenOutput = screenOutput .. [[<text x=\"950\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">NA</text>]]\n                screenOutput = screenOutput .. [[<text x=\"1100\" y=\"]] ..\n                                   (180 + i * 55) .. [[\" class=\"fmend\">NA</text>]]\n\n                \n            end\n            --displayRecipeList[i]=eType[j]\n        else\n            --displayRecipeList[i]=\"\"\n        end\n    end\n    local totalCost=0\n    local numElements=0\n    local knownElements=0\n    local oreAmount = newOreAmount()\n    for i=1, #eType do\n        if not(eCost[i]==nil) and eCost[i] > 0 then\n            totalCost = totalCost+(eCost[i]*eCount[i])\n            oreAmount = addOreAmount(oreAmount,multiplyOreAmount(eOre[i],eCount[i]))\n            knownElements = knownElements+1\n        end        \n        numElements = numElements+eCount[i]\n    end\n\n    screenOutput = screenOutput .. [[<text x=\"700\" y=\"920\" class=\"fmstartr\">Factory Cost</text>]] \n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"920\" class=\"fmstartr\">]]..commerise(math.floor(totalCost))..[[</text>]] \n    screenOutput = screenOutput .. [[<text x=\"700\" y=\"950\" class=\"fmstartr\">Market Markup</text>]] \n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"950\" class=\"fmstartr\">]]..commerise(math.floor(marketMarkup*100))..[[%</text>]] \n    screenOutput = screenOutput .. [[<text x=\"700\" y=\"980\" class=\"fmstartr\">Market Cost</text>]] \n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"980\" class=\"fmstartr\">]]..commerise(math.floor(totalCost * marketMarkup))..[[</text>]] \n\n    screenOutput = screenOutput .. [[<text x=\"700\" y=\"1050\" class=\"fmstartr\">Element Count</text>]] \n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"1050\" class=\"fmstartr\">]]..commerise(numElements)..[[</text>]] \n    screenOutput = screenOutput .. [[<text x=\"700\" y=\"1080\" class=\"fmstartr\">Unknown E Types</text>]] \n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"1080\" class=\"fmstartr\">]]..commerise(#eType-knownElements)..[[</text>]] \n\n   \n    screenOutput = screenOutput ..\n                       [[<rect x=\"1200\" y=\"150\" rx=\"10\" ry=\"10\" width=\"680\" height=\"]] ..\n                       (25 * 35) ..\n                       [[\" style=\"fill:]].. RecipeBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"1210\" y=\"160\" rx=\"5\" ry=\"5\" width=\"670\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"1220\" y=\"191\" class=\"fcapstart\">Ore</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1550\" y=\"191\" class=\"fmendg\">l</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1650\" y=\"191\" class=\"fmendg\">$/l</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1820\" y=\"191\" class=\"fmendg\">$</text>]]\n\n    i=1\n        for k,v in pairs(oreAmount.amount) do\n            if v > 0 and not(k==\"HP\") and not(k==\"O2P\") then\n                screenOutput = screenOutput .. [[<text x=\"1220\" y=\"]] ..\n                                   (190 + i * 35) .. [[\" class=\"fmstartg\">]] ..\n                                   string.format(\"%30s\", k) .. [[</text>]]\n                screenOutput = screenOutput .. [[<text x=\"1550\" y=\"]] ..\n                                   (190 + i * 35) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(math.floor(v))) .. [[</text>]] \n                screenOutput = screenOutput .. [[<text x=\"1650\" y=\"]] ..\n                                   (190 + i * 35) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(orePrice(k))) .. [[</text>]] \n                screenOutput = screenOutput .. [[<text x=\"1820\" y=\"]] ..\n                                   (190 + i * 35) .. [[\" class=\"fmend\">]] ..\n                                   string.format(\"%10s\", commerise(math.floor(v*orePrice(k)))) .. [[</text>]] \n            i=i+1\n            end\n        end\n\n    if not(calcComplete) then\n        screenOutput = screenOutput .. [[<text x=\"900\" y=\"40\" class=\"fmmiddle\">Running</text>]] \n    else\n        screenOutput = screenOutput .. [[<text x=\"900\" y=\"40\" class=\"fmmiddle\">Finished</text>]] \n    end\n    screenOutput = screenOutput ..\n                       [[<rect x=\"700\" y=\"80\" width=\"400\" height=\"20\" style=\"fill:#33331a;stroke:#ffff00;stroke-width:2;\" />]]\n    barLen = math.min(math.floor(400 * (nextRecipe / #eType)),400)\n    screenOutput = screenOutput ..\n                       [[<rect x=\"700\" y=\"80\" width=\"]]..barLen..[[\" height=\"20\" style=\"fill:white\" />]]      \n\n\n\n    if indexCount > recipeLines then\n                screenOutput = screenOutput ..\n                                   [[<text x=\"70\" y=\"1000\" class=\"fmstartp\">Page ]] ..\n                                   CurrentRecipePage .. \" of \" ..\n                                   math.ceil(indexCount / recipeLines) ..\n                                   [[</text>]]\n\n        if CurrentRecipePage < math.ceil(indexCount / recipeLines) then\n                    screenOutput = screenOutput .. [[<svg x=\"70\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..RecipeBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"RecipePageDown\", {\n                        id = \"RecipePageDown\",\n                        x1 = 70,\n                        x2 = 270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"RecipePageDown\")\n        end\n\n        if indexCount > 1 and CurrentRecipePage > 1 then\n                    screenOutput = screenOutput .. [[<svg x=\"280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..RecipeBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"RecipePageUp\", {\n                        id = \"RecipePageUp\",\n                        x1 = 280,\n                        x2 = 480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"RecipePageUp\")\n        end\n    end\n\n    screenOutput = screenOutput .. [[</svg>]]\n\n    DrawSVG(screenOutput,screen1)\n\nend\n\nfunction IntroScreen()   \n\t\n    local screenOutput = \"\"\n    screen1.clear()\n        -- Draw Header\n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"70\" y=\"120\" class=\"ftitle\">Ship Valuation</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1700\" y=\"120\" class=\"fmstartr\">Version: ]]..version..[[</text>]]\n\n    screenOutput = screenOutput ..[[<text x=\"90\" y=\"200\" class=\"fcapstart\">]]..\n\"Welcome to TMVs Ship Valuation Workbench.\"..\n    [[</text>]]\n    screenOutput = screenOutput ..[[<text x=\"90\" y=\"250\" class=\"fcapstart\">]]..\n\"Workbench is currently powering up, please standby.\"..\n    [[</text>]]\n\n    if elementDB == nil then\n            screenOutput = screenOutput ..[[<text x=\"90\" y=\"500\" class=\"fcapstarthr\">]]..\n\"No probe databank is connect.  Please probe the ship and then connect the probe databank\"..[[</text>]]\n            screenOutput = screenOutput ..[[<text x=\"150\" y=\"550\" class=\"fcapstarthr\">]]..\n\"and restart workbench\"..[[</text>]]\n    end\n        \n    screenOutput = screenOutput .. [[</svg>]]\n\n    DrawSVG(screenOutput,screen1)\nend\n\n-----------------------------------------------\n-- Execute\n-----------------------------------------------\nunit.setTimer(\"startup\",1)\nunit.hide()\nIntroScreen()\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"3"},{"code":"if not(processingRecipe) and nextRecipe <= #eType then\n     reqString = \"\"\n     processingRecipe=true\n     --system.print(\"Element:\"..eType[nextRecipe]:rmap())\n\tif recipeSize == 1 then reqString=eType[nextRecipe]:rmap()\n        reqRecipe(reqString)\n     elseif recipeSize == 2 then reqString=eType[nextRecipe]:rmap()..\" XS\"\n                reqRecipe(reqString)\n     elseif recipeSize == 3 then reqString=eType[nextRecipe]:rmap()..\" S\"\n                reqRecipe(reqString)\n     elseif recipeSize == 4 then reqString=eType[nextRecipe]:rmap()..\" M\"\n                reqRecipe(reqString)\n     elseif recipeSize == 5 then reqString=eType[nextRecipe]:rmap()..\" L\"\n                reqRecipe(reqString)\n     elseif recipeSize == 6 then reqString=eType[nextRecipe]:rmap()..\" XL\"\n                reqRecipe(reqString)\n     else\n        --system.print(\"No Recipe Found for:\"..eType[nextRecipe]:rmap())\n        eCost[nextRecipe] = 0\n        eOre[nextRecipe] = \"\"\n        recipeSize=1\n        nextRecipe=nextRecipe+1\n        processingRecipe=false\n     end\n    \nend\n\nif nextRecipe > #eType then\n    system.print(\"Recipe Lookup Complete\")\n    calcComplete = true\n    DrawScreen()\n    unit.stopTimer(\"recipeQ\")\nend","filter":{"args":[{"value":"recipeQ"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"},{"code":"if commsdb.getStringValue(\"serverStatus\") == \"Live\" and not(elementDB == nil) then\n    unit.stopTimer(\"startup\")\n    \n    loadElementList()\n    DrawScreen()\n    nextRecipe=1\n    recipeSize=1\n    unit.setTimer(\"recipeQ\",1)\nend\n\n","filter":{"args":[{"value":"startup"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"},{"code":"if string.sub(text,1,6) == \"filter\" then\n    userFilter = string.sub(text,8,string.len(text))\n    CheckClick(0, 0,\"Filter5\")\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"6"}],"methods":[],"events":[]}
