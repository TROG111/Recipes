{"slots":{"0":{"name":"db1","type":{"events":[],"methods":[]}},"1":{"name":"db2","type":{"events":[],"methods":[]}},"2":{"name":"db3","type":{"events":[],"methods":[]}},"3":{"name":"db4","type":{"events":[],"methods":[]}},"4":{"name":"db5","type":{"events":[],"methods":[]}},"5":{"name":"db6","type":{"events":[],"methods":[]}},"6":{"name":"db7","type":{"events":[],"methods":[]}},"7":{"name":"db8","type":{"events":[],"methods":[]}},"8":{"name":"menudb","type":{"events":[],"methods":[]}},"9":{"name":"commsdb","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"json = require('dkjson')\nversion = \"1_1_1\"\n\ndatabankList={}\nrecipeIndexList={}\ncachedCost={}\ncachedSchema={}\ncachedInd={}\ncachedLev={}\n\nfunction removeDuplicates(arr)\n\t    local newArray = {}\n\t    local checkerTbl = {}\n\t    for _, element in ipairs(arr) do\n\t        if not checkerTbl[element] then -- if there is not yet a value at the index of element, then it will be nil, which will operate like false in an if statement\n\t            checkerTbl[element] = true\n\t            table.insert(newArray, element)\n\t        end\n\t    end\n\t    return newArray\nend\n           \nfunction getRecipe( recipeName)\n    if recipeName then\n        for i=1,#databankList do\n            recipe = databankList[i].getStringValue(recipeName)\n            if recipe and not( recipe == \"\") then\n                --system.print(\"DB: \"..i..\" Recipe: \"..recipe)\n                -- change 'in' to 'nd' for backwards compatibility\n                --return json.decode(string.gsub(recipe,[[\"in\":]], [[\"nd\":]]))\n                return json.decode(recipe)\n            end\n        end\n    end\n    return \"\"\nend\n\nfunction getPrimeInd(recipe)   \n    if recipe then\n        for i=1,#recipe.nd do\n            if recipe.nd[i] == \"\" then break end\n            if not( recipe.nd[i] == \"Np\" ) then \n                return recipe.nd[i]\n            end\n        end\n    end      \n    return \"\"    \nend\n\nfunction getTalents(recipe)\n    local talent={}\n    talent.ind=\"\"\n    talent.lev=0\n        if recipe then\n            primaryInd = getPrimeInd(recipe)\n            talent.ind = primaryInd\n            talent.lev = recipe.ti\n        end\n    return primaryInd,recipe.ti\nend\n\nfunction linkDatabank()\n    for slot_name, slot in pairs(unit) do\n        --system.print(\"Name = \"..slot_name)\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and\n            slot.getElementClass then\n            if not(slot_name == \"menudb\") and not(slot_name == \"commsdb\")then      \n                if slot.getElementClass():lower():find(\"databankunit\") then  \n                    --system.print(\"Name = \"..slot_name)\n                    databankList[#databankList+1] = slot\n                end\n            end\n        end\n    end\nend\n\nfunction newOreAmount()\n\n    local ore={}\n\n    ore.amount={}\n    ore.amount[\"Bauxite\"]=0\n    ore.amount[\"Coal\"]=0\n    ore.amount[\"Quartz\"]=0\n    ore.amount[\"Hematite\"]=0\n    ore.amount[\"Chromite\"]=0\n    ore.amount[\"Malachite\"]=0\n    ore.amount[\"Limestone\"]=0\n    ore.amount[\"Natron\"]=0\n    ore.amount[\"Petalite\"]=0\n    ore.amount[\"Garnierite\"]=0\n    ore.amount[\"Acanthite\"]=0\n    ore.amount[\"Pyrite\"]=0\n    ore.amount[\"Cobaltite\"]=0\n    ore.amount[\"Cryolite\"]=0\n    ore.amount[\"Kolbeckite\"]=0\n    ore.amount[\"Gold Nuggets\"]=0\n    ore.amount[\"Rhodonite\"]=0\n    ore.amount[\"Columbite\"]=0\n    ore.amount[\"Illmenite\"]=0\n    ore.amount[\"Vanadinite\"]=0\n    ore.amount[\"O2P\"]=0\n    ore.amount[\"HP\"]=0\n    return ore\nend\n\nfunction addOreAmount(ore1, ore2)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Adding: \"..i..\"(\"..ore1.amount[i]..\"+\"..ore2.amount[i]..\")\")\n        ore.amount[i]=ore1.amount[i]+ore2.amount[i]\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend\n\nfunction multiplyOreAmount(ore1, factor)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Multi: \"..i..\"(\"..ore1.amount[i]..\"*\"..factor..\")\")\n        ore.amount[i]=ore1.amount[i]*factor\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend    \n\nfunction mergeTalentDuplicates(ind, lev)\n    newInd={}\n    newLev={}\n    if ind then\n        newInd = removeDuplicates(ind)\n        for i=1,#newInd do\n            newLev[i]=0\n            for j=1,#ind do\n                if newInd[i] and newInd[i] == ind[j] then\n                    newLev[i]=math.max(newLev[i],lev[j])\n                end\n            end\n        end\n    end\n    return newInd, newLev\nend\n\ncacheIndex={}\nfunction cacheRecipeData(recipeName,cost,schema, ind, lev)\n    cachedCost[recipeName]=cost\n    cachedSchema[recipeName]=removeDuplicates(schema)\n    cachedInd[recipeName]=ind\n    cachedLev[recipeName]=lev\n    cacheIndex[#cacheIndex+1]=recipeName\nend\n\nfunction calculateCost(recipe)\n    local ingredRecipe = \"\"\n    local ore = newOreAmount()\n    local ingCost = newOreAmount()\n    local ingSchema = {}\n    local recSchema = {}\n    local recInd = {}\n    local recLev = {}\n    local ingInd={}\n    local ingLev={}\n    local i = \"\"\n    local v = 0\n    --system.print(\"Recipe1: \"..json.encode(recipe))\n    if recipe then\n        --system.print(\"Recipe nm=\"..recipe.nm)\n        if not( recipe.tp==\"Ore\" or recipe.nm == \"O2P\" or recipe.nm == \"HP\") then\n          --system.print(\"Recipe2: \"..json.encode(recipe))\n          for i,v in pairs(recipe.ip) do\n            --system.print(\"Ingred nm=\"..i)\n            if cachedCost[i] and not(cachedCost[i]==nil) and not(cachedCost[i]==\"\") then  \n                \n                ingCost = cachedCost[i]\n                ingSchema = cachedSchema[i]\n                ingInd = cachedInd[i]\n                ingLev = cachedLev[i]\n            else\n                \n                ingredRecipe = getRecipe(i)\n                --system.print(\"Igred Rec=\"..json.encode(ingredRecipe))\n                if ingredRecipe == \"\" or i == \"O2P\" or i == \"HP\" then\n                    ingCost.amount[i]=1\n                else         \n                    ingCost, ingSchema, ingInd, ingLev = calculateCost(ingredRecipe)\n                end\n                cacheRecipeData(i,ingCost, ingSchema,ingInd, ingLev)\n            end\n            local ingredOre = multiplyOreAmount(ingCost,(v/recipe.op))\n            ore = addOreAmount(ore,ingredOre)\n            for j,w in pairs(ingSchema) do\n                recSchema[#recSchema+1]=w\n            end\n            for j,w in pairs(ingInd) do\n                recInd[#recInd+1]=w\n            end\n            for j,w in pairs(ingLev) do\n                recLev[#recLev+1]=w\n            end\n          end\n          recSchema[#recSchema+1]=recipe.nm\n          ind, lev =getTalents(recipe)\n          if ind then\n          recInd[#recInd+1]=ind\n          recLev[#recLev+1]=lev\n          end\n        else \n          ore.amount[recipe.nm] = ore.amount[recipe.nm] + recipe.op\n        end \n    else\n        system.print(\"Recipe=nil\")\n    end\n    collectgarbage(\"collect\")\n    recSchema = removeDuplicates(recSchema)\n    recInd, recLev = mergeTalentDuplicates(recInd, recLev)\n    return ore, recSchema, recInd, recLev\nend\n\nlinkDatabank()\ncommsdb.setStringValue(\"Req\",\"\")\ncommsdb.setStringValue(\"Res\",\"\")\ncommsdb.setStringValue(\"Cost\",\"\")\ncommsdb.setStringValue(\"schemaCost\",\"\")\ncommsdb.setStringValue(\"talentCost\",\"\")\n\ncacheList={}\ncacheList[#cacheList+1]=\"AlP\"\ncacheList[#cacheList+1]=\"SiP\"\ncacheList[#cacheList+1]=\"CP\"\ncacheList[#cacheList+1]=\"FeP\"\ncacheList[#cacheList+1]=\"CaP\"\ncacheList[#cacheList+1]=\"NaP\"\ncacheList[#cacheList+1]=\"ChP\"\ncacheList[#cacheList+1]=\"CuP\"\ncacheList[#cacheList+1]=\"LiP\"\ncacheList[#cacheList+1]=\"NiP\"\ncacheList[#cacheList+1]=\"AgP\"\ncacheList[#cacheList+1]=\"SP\"\ncacheList[#cacheList+1]=\"CoP\"\ncacheList[#cacheList+1]=\"Al-Fe Aly\"\ncacheList[#cacheList+1]=\"CaCu\"\ncacheList[#cacheList+1]=\"Sil\"\ncacheList[#cacheList+1]=\"Dur\"\ncacheList[#cacheList+1]=\"Ant S\"\ncacheList[#cacheList+1]=\"Table\"\ncacheList[#cacheList+1]=\"Adv StdF S\"\ncacheList[#cacheList+1]=\"Bsc GasC M\"\ncacheList[#cacheList+1]=\"Space Core M\"\ncacheList[#cacheList+1]=\"Military SpcE L\"\ncacheList[#cacheList+1]=\"Atmospheric Airbrake S\"\ncacheList[#cacheList+1]=\"Dynamic Core S\"\ncacheList[#cacheList+1]=\"Rar PwrC L\"\ncacheCount=0\n\nsystem.print(\"Version: \"..version)\nsystem.print(\"Initialising Cache\")\n\n--system.print(\"json test:\"..json.encode(cacheList))\n\nunit.hide()\nunit.setTimer(\"cache\",0.5)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"local request = commsdb.getStringValue(\"Req\")\ncommsdb.setStringValue(\"Req\",\"\")\n--commsdb.setStringValue(\"oreCost\",\"\")\nlocal Cost = {}\nlocal schema=\"\"\nlocal ind={}\nlocal lev={}\nlocal Stat\nlocal test={}\n\nif not(request == \"\") then\n    local recipe = getRecipe( request )\n    if recipe then\n        commsdb.setStringValue(\"Res\",json.encode(recipe))\n        Cost, schema, ind, lev=  calculateCost(recipe)        \n        --talents = getTalents(schema)\n        --system.print(\"Talents=\"..json.encode(talents))\n        --talents={}\n        talentStr=buildTalentJson(ind, lev)\n--        system.print(\"talent str:\"..talentStr)\n        commsdb.setStringValue(\"oreCost\",json.encode(Cost))\n        commsdb.setStringValue(\"schemaCost\",buildSchemaJson(schema))\n        commsdb.setStringValue(\"talentCost\",talentStr)\n    end\nend\ncollectgarbage(\"collect\")\n\nfunction buildSchemaJson(schema)\n    schemaStr = \"[\"\n    for _,v in pairs(schema) do\n        if #schemaStr > 1 then schemaStr=schemaStr..\",\" end\n        schemaStr=schemaStr..[[\"]]..v..[[\"]]\n    end\n    return schemaStr..\"]\"\nend\n\nfunction buildTalentJson(ind, lev)\n    talentStr = \"[\"\n    for i=1,#ind do\n        if #talentStr > 1 then talentStr=talentStr..\",\" end\n        talentStr=talentStr..[[{\"ind\":\"]]..ind[i]..[[\",\"lev\":]]..lev[i]..[[}]]\n    end\n    return talentStr..\"]\"\nend\n","filter":{"args":[{"value":"readReq"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"cacheCount = cacheCount + 1\n    \nif cacheCount > #cacheList then\n    unit.setTimer(\"readReq\",2)\n    unit.stopTimer(\"cache\")\n    system.print(\"Initialising Complete\")\nend\nif cacheList[cacheCount] then\n    local recipe = getRecipe( cacheList[cacheCount] )\n    if recipe then \n        local ind, lev\n        Cost, schema, ind, lev =calculateCost(recipe)\n    end\nend\n\n    \n    ","filter":{"args":[{"value":"cache"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"}],"methods":[],"events":[]}
