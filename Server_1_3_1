{"slots":{"0":{"name":"db1","type":{"events":[],"methods":[]}},"1":{"name":"db2","type":{"events":[],"methods":[]}},"2":{"name":"db3","type":{"events":[],"methods":[]}},"3":{"name":"db4","type":{"events":[],"methods":[]}},"4":{"name":"db5","type":{"events":[],"methods":[]}},"5":{"name":"db6","type":{"events":[],"methods":[]}},"6":{"name":"db7","type":{"events":[],"methods":[]}},"7":{"name":"db8","type":{"events":[],"methods":[]}},"8":{"name":"menudb","type":{"events":[],"methods":[]}},"9":{"name":"commsdb","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"function initiateRequiredLibaries()\n    json = require('dkjson')\nend\nif pcall(initiateRequiredLibaries) then\n    system.print(\"Libaries loaded successfully\")\n    else\n    system.print(\"Libaries failed to load: check that the following libraries exist:\")\n    system.print(\"(<ProgrmData> is the directory in to which you installed DU)\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n    system.print(\"\")\n    unit.exit()\nend\nversion = \"1_3_1\"\n\n-- Talent Productivity Levels\n\nTPLAtmoFuel = 5  --export: Atmo Fuel Productivity Level\nTPLSpaceFuel = 5  --export: Space Fuel Productivity Level\nTPLRocketFuel = 0  --export: Rocket Fuel Productivity Level\n\nTPLBasIntPart = 5  --export: Basic Intermediate Part Productivity Level\nTPLUncIntPart = 5  --export: Uncommon Intermediate Part Productivity Level\nTPLAdvIntPart = 5  --export: Advanced Intermediate Part Productivity Level\n\nTPLAdvXSAmmo = 0  --export: Advanced XS Ammo Productivity Level\nTPLAdvSAmmo = 0  --export: Advanced S Ammo Productivity Level\nTPLAdvMAmmo = 0  --export: Advanced M Ammo Productivity Level\nTPLAdvLAmmo = 0  --export: Advanced L Ammo Productivity Level\nTPLAdvXLAmmo = 0  --export: Advanced XL Ammo Productivity Level\n\nTPLUncXSAmmo = 0  --export: Uncommon XS Ammo Productivity Level\nTPLUncSAmmo = 0  --export: Uncommon S Ammo Productivity Level\nTPLUncMAmmo = 0  --export: Uncommon M Ammo Productivity Level\nTPLUncLAmmo = 0  --export: Uncommon L Ammo Productivity Level\nTPLUncXLAmmo = 0  --export: Uncommon XL Ammo Productivity Level\n\nTPLRAl = 5  --export: Bauxite Refining Productivity Level\nTPLRSi = 5  --export: Quartz Refining Productivity Level\nTPLRC = 5  --export: Coal Refining Productivity Level\nTPLRFe = 5  --export: Hematite Refining Productivity Level\n\nTPLRCa = 5  --export: Ore Refining Productivity Level\nTPLRNa = 5  --export: Ore Refining Productivity Level\nTPLRCh = 5  --export: Ore Refining Productivity Level\nTPLRCu = 5  --export: Ore Refining Productivity Level\n\nTPLRLi = 5  --export: Ore Refining Productivity Level\nTPLRNi = 5  --export: Ore Refining Productivity Level\nTPLRAg = 5  --export: Ore Refining Productivity Level\nTPLRS = 5  --export: Ore Refining Productivity Level\n\nTPLRCo = 0  --export: Ore Refining Productivity Level\nTPLRAu = 0  --export: Ore Refining Productivity Level\nTPLRSc = 0  --export: Ore Refining Productivity Level\nTPLRFl = 0  --export: Ore Refining Productivity Level\n\nTPLRMn = 0  --export: Ore Refining Productivity Level\nTPLRNb = 0  --export: Ore Refining Productivity Level\nTPLRTi = 0  --export: Ore Refining Productivity Level\nTPLRVa = 0  --export: Ore Refining Productivity Level\n\nTPLAl = 5  --export: Pure Aluminium Refining Productivity Level\nTPLSi = 5  --export: Pure Silicon Refining Productivity Level\nTPLC = 5  --export: Pure Carbon Refining Productivity Level\nTPLFe = 5  --export: Pure Iron Refining Productivity Level\n\nTPLCa = 5  --export: Pure Calcium Refining Productivity Level\nTPLNa = 5  --export: Pure Sodium Refining Productivity Level\nTPLCh = 5  --export: Pure Chromium Refining Productivity Level\nTPLCu = 5  --export: Pure Copper Refining Productivity Level\n\nTPLLi = 5  --export: Pure Lithium Refining Productivity Level\nTPLNi = 5  --export: Pure Nickel Refining Productivity Level\nTPLAg = 5  --export: Pure Silver Refining Productivity Level\nTPLS = 5  --export: Pure Sulpher Refining Productivity Level\n\nTPLCo = 0  --export: Pure Cobalt Refining Productivity Level\nTPLAu = 0  --export: Pure Gold Refining Productivity Level\nTPLSc = 0  --export: Pure Scandium Refining Productivity Level\nTPLFl = 0  --export: Pure Flourine Refining Productivity Level\n\nTPLMn = 0  --export: Pure Manganese Refining Productivity Level\nTPLNb = 0  --export: Pure Noibium Refining Productivity Level\nTPLTi = 0  --export: Pure Titanium Refining Productivity Level\nTPLVa = 0  --export: Pure Vanadium Refining Productivity Level\n\nTPLAlFe = 5  --export: Al-Fe Alloy Productivity Level\nTPLGlass = 5  --export: Glass Productivity Level\nTPLSil = 5  --export: Silumin Productivity Level\nTPLStl = 5  --export: Steel Productivity Level\nTPLPlyCarb = 5  --export: Polycarbonate Productivity Level\n\nTPLCaCu = 5  --export: calcium reinforced Copper Productivity Level\nTPLDur = 5  --export: Duramin Productivity Level\nTPLStStl = 0  --export: Stainless Steel Productivity Level\nTPLAdvGlass = 5  --export: Advanced Glass Productivity Level\nTPLPlyCal = 5  --export: Polycalcite Productivity Level\n\nTPLAlLi = 5  --export: Al-Li Alloy Productivity Level\nTPLCuAg = 5  --export: Cu-Ag Alloy Productivity Level\nTPLInc = 5  --export: Inconel Productivity Level\nTPLAgLiGlass = 5  --export: Ag-Li Reinforced Glass Productivity Level\nTPLPlyS = 5  --export: Polysulfite Productivity Level\n\nTPLMarStl = 0  --export: Maragin Steel Productivity Level\nTPLRedGold = 0  --export: Red Gold Productivity Level\nTPLScAl = 0  --export: Sc-Al Alloy Productivity Level\nTPLAuGlass = 0  --export: Gold Reinforced Glass Productivity Level\nTPLPlyFl = 0  --export: Polyfloride Productivity Level\n\nTPLTit = 0  --export: Grade 5 Titanium Alloy Productivity Level\nTPLMan = 0  --export: Manganese Alloy Productivity Level\nTPLTiNb = 0  --export: T-Nb Supraconductor Productivity Level\nTPLMnGlass = 0  --export: Manganese Reinforced Flass Productivity Level\nTPLVan = 0  --export: VanMar Productivity Level\n\ndatabankList={}\nrecipeIndexList={}\ncachedCost={}\ncachedSchema={}\ncachedInd={}\ncachedLev={}\ncacheIndex={}\n\nfunction dumpCache()\n    system.print(\"Cache len=\"..#cacheIndex)\nfor i=1,#cacheIndex do\n    system.print(\"Cache[\"..cacheIndex[i]..\"] = \"..json.encode(cachedCost[cacheIndex[i]]))\nend\nend\n\nfunction removeDuplicates(arr)\n\t    local newArray = {}\n\t    local checkerTbl = {}\n\t    for _, element in ipairs(arr) do\n\t        if not checkerTbl[element] then -- if there is not yet a value at the index of element, then it will be nil, which will operate like false in an if statement\n\t            checkerTbl[element] = true\n\t            table.insert(newArray, element)\n\t        end\n\t    end\n\t    return newArray\nend\n           \nfunction getRecipe( recipeName)\n    --system.print(\"RecipeName=\"..recipeName)\n    if recipeName then\n        for i=1,#databankList do\n            --system.print(\"Databank=\"..i)\n            recipe = databankList[i].getStringValue(recipeName)\n            if recipe and not( recipe == \"\") then\n                --system.print(\"DB: \"..i..\" Recipe: \"..recipe)\n                return json.decode(recipe)\n            end\n        end\n    end\n    return false\nend\n\n\nfunction getPrimeInd(recipe)   \n    if recipe then\n        for i=1,#recipe.nd do\n            if recipe.nd[i] == \"\" then break end\n            if not( recipe.nd[i] == \"Np\" ) then \n                return recipe.nd[i]\n            end\n        end\n    end      \n    return \"\"    \nend\n\nfunction getTalents(recipe)\n    local talent={}\n    talent.ind=\"\"\n    talent.lev=0\n        if recipe then\n            primaryInd = getPrimeInd(recipe)\n            talent.ind = primaryInd\n            talent.lev = recipe.ti\n        end\n    return primaryInd,recipe.ti\nend\n\nfunction linkDatabank()\n    for slot_name, slot in pairs(unit) do\n        --system.print(\"Name = \"..slot_name)\n        if type(slot) == \"table\" and type(slot.export) == \"table\" and\n            slot.getElementClass then\n            if not(slot_name == \"menudb\") and not(slot_name == \"commsdb\")then      \n                if slot.getElementClass():lower():find(\"databankunit\") then  \n                    --system.print(\"Name = \"..slot_name)\n                    databankList[#databankList+1] = slot\n                    --system.print(json.encode(slot.getKeys()))\n                end\n            end\n        end\n    end\nend\n\nfunction newOreAmount()\n\n    local ore={}\n\n    ore.amount={}\n    ore.amount[\"Bauxite\"]=0\n    ore.amount[\"Coal\"]=0\n    ore.amount[\"Quartz\"]=0\n    ore.amount[\"Hematite\"]=0\n    ore.amount[\"Chromite\"]=0\n    ore.amount[\"Malachite\"]=0\n    ore.amount[\"Limestone\"]=0\n    ore.amount[\"Natron\"]=0\n    ore.amount[\"Petalite\"]=0\n    ore.amount[\"Garnierite\"]=0\n    ore.amount[\"Acanthite\"]=0\n    ore.amount[\"Pyrite\"]=0\n    ore.amount[\"Cobaltite\"]=0\n    ore.amount[\"Cryolite\"]=0\n    ore.amount[\"Kolbeckite\"]=0\n    ore.amount[\"Gold Nuggets\"]=0\n    ore.amount[\"Rhodonite\"]=0\n    ore.amount[\"Columbite\"]=0\n    ore.amount[\"Illmenite\"]=0\n    ore.amount[\"Vanadinite\"]=0\n    ore.amount[\"O2P\"]=0\n    ore.amount[\"HP\"]=0\n    return ore\nend\n\nfunction addOreAmount(ore1, ore2)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Adding: \"..i..\"(\"..ore1.amount[i]..\"+\"..ore2.amount[i]..\")\")\n        ore.amount[i]=ore1.amount[i]+ore2.amount[i]\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend\n\nfunction multiplyOreAmount(ore1, factor)\n    local ore={}\n    ore.amount={}\n    for i,v in pairs(ore1.amount) do\n        --system.print(\"Multi: \"..i..\"(\"..ore1.amount[i]..\"*\"..factor..\")\")\n        ore.amount[i]=ore1.amount[i]*factor\n        --system.print(\"=\"..ore.amount[i])\n    end\n    return ore\nend    \n\nfunction mergeTalentDuplicates(ind, lev)\n    newInd={}\n    newLev={}\n    if ind then\n        newInd = removeDuplicates(ind)\n        for i=1,#newInd do\n            newLev[i]=0\n            for j=1,#ind do\n                if newInd[i] and newInd[i] == ind[j] then\n                    newLev[i]=math.max(newLev[i],lev[j])\n                end\n            end\n        end\n    end\n    return newInd, newLev\nend\n\n\nfunction applyProductionTalents(recipe)\n    --system.print(\"Rec:\"..json.encode(recipe))\n    if recipe.nm == \"Nitron Fuel\" then recipe.op = recipe.op * (1 + (TPLAtmoFuel*0.05))\n    elseif string.sub(recipe.nm,1,6) == \"Kergon\" then recipe.op = recipe.op * (1 + (TPLSpaceFuel*0.05))\n    elseif recipe.nm == \"Xeron Fuel\" then recipe.op = recipe.op * (1 + (TPLSpaceFuel*0.05))\n    -- T1 Refining\n    elseif recipe.nm == \"Bauxite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRAl*0.03))\n    elseif recipe.nm == \"Quartz\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRSi*0.03))\n    elseif recipe.nm == \"Hematite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRFe*0.03))\n    elseif recipe.nm == \"Coal\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRC*0.03))\n    -- T2 Refining\n    elseif recipe.nm == \"Limestone\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRCa*0.03))\n    elseif recipe.nm == \"Natron\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRNa*0.03))\n    elseif recipe.nm == \"Chromite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRCh*0.03))\n    elseif recipe.nm == \"Malachite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRCu*0.03))\n    -- T3 Refining\n    elseif recipe.nm == \"Petalite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRLi*0.03))\n    elseif recipe.nm == \"Garnierite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRNi*0.03))\n    elseif recipe.nm == \"Acanthite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRAg*0.03))\n    elseif recipe.nm == \"Pyrite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRS*0.03))\n    -- T4 Refining\n    elseif recipe.nm == \"Cobaltite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRCo*0.03))\n    elseif recipe.nm == \"Gold Nuggets\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRAu*0.03))\n    elseif recipe.nm == \"Kolbeckite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRSc*0.03))\n    elseif recipe.nm == \"Cryolite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRFl*0.03))\n    -- T5 Refining\n    elseif recipe.nm == \"Rhodonite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRMn*0.03))\n    elseif recipe.nm == \"Columbite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRNb*0.03))\n    elseif recipe.nm == \"Illmenite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRTi*0.03))\n    elseif recipe.nm == \"Vanadinite\" and recipe.tp == \"Ore\" then recipe.op = recipe.op * (1 - (TPLRVa*0.03))\n     -- T1 Pures\n    elseif recipe.nm == \"AlP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLAl*0.03))\n    elseif recipe.nm == \"SiP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLSi*0.03))\n    elseif recipe.nm == \"FeP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLFe*0.03))\n    elseif recipe.nm == \"CP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLC*0.03))\n    -- T2 Pures\n    elseif recipe.nm == \"CaP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLCa*0.03))\n    elseif recipe.nm == \"NaP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLNa*0.03))\n    elseif recipe.nm == \"ChP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLCh*0.03))\n    elseif recipe.nm == \"CuP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLCu*0.03))\n    -- T3 Pures\n    elseif recipe.nm == \"LiP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLLi*0.03))\n    elseif recipe.nm == \"NiP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLNi*0.03))\n    elseif recipe.nm == \"AgP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLAg*0.03))\n    elseif recipe.nm == \"SP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLS*0.03))\n    -- T4 Pures\n    elseif recipe.nm == \"CoP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLCo*0.03))\n    elseif recipe.nm == \"AuP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLAu*0.03))\n    elseif recipe.nm == \"ScP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLSc*0.03))\n    elseif recipe.nm == \"FlP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLFl*0.03))\n    -- T5 Pures\n    elseif recipe.nm == \"MnP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLMn*0.03))\n    elseif recipe.nm == \"NbP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLNb*0.03))\n    elseif recipe.nm == \"TiP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLTi*0.03))\n    elseif recipe.nm == \"VaP\" and recipe.tp == \"Pu\" then recipe.op = recipe.op * (1 + (TPLVa*0.03))\n\n    -- Basic Products\n    elseif recipe.nm == \"Al-Fe Aly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLAlFe*0.03))\n    elseif recipe.nm == \"Glass\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLGlass*0.03))\n    elseif recipe.nm == \"Sil\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLSil*0.03))   \n    elseif recipe.nm == \"Stl\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLStl*0.03))\n    elseif recipe.nm == \"PlyC\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLPlyCarb*0.03))\n    -- Uncommon Products\n    elseif recipe.nm == \"CaCu\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLCaCu*0.03))\n    elseif recipe.nm == \"AdvG\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLAdvGlass*0.03))\n    elseif recipe.nm == \"StSt\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLStStl*0.03))   \n    elseif recipe.nm == \"Dur\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLDur*0.03))\n    elseif recipe.nm == \"PlyA\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLPlyCal*0.03))\n    -- Advanced Products\n    elseif recipe.nm == \"Al-Li Aly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLAlLi*0.03))\n    elseif recipe.nm == \"Cu-Ag Aly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLCuAg*0.03))\n    elseif recipe.nm == \"Inc\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLInc*0.03))   \n    elseif recipe.nm == \"Ag-Li ReiG\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLAgLiGlass*0.03))\n    elseif recipe.nm == \"PlyS\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLPlyS*0.03))\n    -- Rare Products\n    elseif recipe.nm == \"Maraging Stl\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLMarStl*0.03))\n    elseif recipe.nm == \"Red Gold\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLRedGold*0.03))\n    elseif recipe.nm == \"Sc-Al Aly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLScAl*0.03))   \n    elseif recipe.nm == \"Gold Coated Glass\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLAuGlass*0.03))\n    elseif recipe.nm == \"Fluoropolymer\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLPlyFl*0.03))\n    -- Exotic Products\n    elseif recipe.nm == \"Grade 5 Titanium Aly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLTit*0.03))\n    elseif recipe.nm == \"MangAly\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLMan*0.03))\n    elseif recipe.nm == \"Ti-Nb Supraconductor\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLTiNb*0.03))   \n    elseif recipe.nm == \"Manganese ReiG\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLMnGlass*0.03))\n    elseif recipe.nm == \"Vanmr\" and recipe.tp == \"Prd\" then recipe.op = recipe.op * (1 + (TPLVan*0.03))\n    -- Intermediate Parts\n    elseif recipe.ti == 1 and recipe.tp == \"IntP\" then recipe.op = recipe.op + (1*TPLBasIntPart)\n    elseif recipe.ti == 2 and recipe.tp == \"IntP\" then recipe.op = recipe.op + (1*TPLUncIntPart)\n    elseif recipe.ti == 3 and recipe.tp == \"IntP\" then recipe.op = recipe.op + (1*TPLAdvIntPart)\n    -- Uncommon Ammo\n    elseif recipe.ti == 2 and string.match(recipe.nm,\"Ammo XS\") then recipe.op = recipe.op + (1*TPLUncXSAmmo)\n    elseif recipe.ti == 2 and string.match(recipe.nm,\"Ammo S\") then recipe.op = recipe.op + (1*TPLUncSAmmo)\n    elseif recipe.ti == 2 and string.match(recipe.nm,\"Ammo M\") then recipe.op = recipe.op + (1*TPLUncMAmmo)\n    elseif recipe.ti == 2 and string.match(recipe.nm,\"Ammo L\") then recipe.op = recipe.op + (1*TPLUncLAmmo)\n    elseif recipe.ti == 2 and string.match(recipe.nm,\"Ammo XL\") then recipe.op = recipe.op + (1*TPLUncXLAmmo)\n    -- Adv Ammo\n    elseif recipe.ti == 3 and string.match(recipe.nm,\"Ammo XS\") then recipe.op = recipe.op + (1*TPLAdvXSAmmo)\n    elseif recipe.ti == 3 and string.match(recipe.nm,\"Ammo S\") then recipe.op = recipe.op + (1*TPLAdvSAmmo)\n    elseif recipe.ti == 3 and string.match(recipe.nm,\"Ammo M\") then recipe.op = recipe.op + (1*TPLAdvMAmmo)\n    elseif recipe.ti == 3 and string.match(recipe.nm,\"Ammo L\") then recipe.op = recipe.op + (1*TPLAdvLAmmo)\n    elseif recipe.ti == 3 and string.match(recipe.nm,\"Ammo XL\") then recipe.op = recipe.op + (1*TPLAdvXLAmmo)\n\n\n    end\n    return recipe\nend\n\nfunction cacheRecipeData(recipeName,cost,schema, ind, lev)\n    cachedCost[recipeName]=cost\n    cachedSchema[recipeName]=removeDuplicates(schema)\n    cachedInd[recipeName]=ind\n    cachedLev[recipeName]=lev\n    cacheIndex[#cacheIndex+1]=recipeName\nend\n\nfunction calculateCost(recipe)\n    local ingredRecipe = {}\n    local ore = newOreAmount()\n    local ingCost = newOreAmount()\n    local ingSchema = {}\n    local recSchema = {}\n    local recInd = {}\n    local recLev = {}\n    local ingInd={}\n    local ingLev={}\n    local i = \"\"\n    local v = 0\n    --system.print(\"Recipe1: \"..json.encode(recipe)..\"--\"..recipe)\n    if recipe and not(recipe==nil) then\n        recipe = applyProductionTalents(recipe)\n        --system.print(\"Recipe nm=\"..recipe.nm)\n        if not( recipe.tp==\"Ore\" or recipe.nm == \"O2P\" or recipe.nm == \"HP\") then\n          --system.print(\"Recipe2: \"..json.encode(recipe))\n          for i,v in pairs(recipe.ip) do\n            ingCost=newOreAmount()\n            --system.print(\"Ingred nm=\"..i)\n            if cachedCost[i] and not(cachedCost[i]==nil) and not(cachedCost[i]==\"\") then  \n                \n                ingCost = cachedCost[i]\n                ingSchema = cachedSchema[i]\n                ingInd = cachedInd[i]\n                ingLev = cachedLev[i]\n            else\n                \n                ingredRecipe = getRecipe(i)\n                \n                if not(ingredRecipe) or ingredRecipe.tp == \"Ore\" or i == \"O2P\" or i == \"HP\" then\n                    --system.print(\"unknown ingred=\"..i)\n                    --system.print(\"unknown recipe=\"..json.encode(ingredRecipe))\n                    ingredRecipe = applyProductionTalents(ingredRecipe)\n                    ingCost.amount[i]=ingredRecipe.op\n                else         \n                    --system.print(\"Igred Rec=\"..json.encode(ingredRecipe))\n                    ingredRecipe, ingCost, ingSchema, ingInd, ingLev = calculateCost(ingredRecipe)\n                end\n                    --system.print(\"Caching Recipe:\"..i)\n                    --system.print(\"Value=\"..json.encode(ingCost))\n                cacheRecipeData(i,ingCost, ingSchema,ingInd, ingLev)\n            end\n            local ingredOre = multiplyOreAmount(ingCost,(v/recipe.op))\n            ore = addOreAmount(ore,ingredOre)\n            for j,w in pairs(ingSchema) do\n                recSchema[#recSchema+1]=w\n            end\n            for j,w in pairs(ingInd) do\n                recInd[#recInd+1]=w\n            end\n            for j,w in pairs(ingLev) do\n                recLev[#recLev+1]=w\n            end\n          end\n          recSchema[#recSchema+1]=recipe.nm\n          ind, lev =getTalents(recipe)\n          if ind then\n          recInd[#recInd+1]=ind\n          recLev[#recLev+1]=lev\n          end\n        else \n          ore.amount[recipe.nm] = ore.amount[recipe.nm] + recipe.op\n        end \n    else\n        system.print(\"Recipe=nil\")\n    end\n    collectgarbage(\"collect\")\n    recSchema = removeDuplicates(recSchema)\n    recInd, recLev = mergeTalentDuplicates(recInd, recLev)\n--    ore = applyProductionTalents(recipe, ore)\n    cacheRecipeData(recipe.nm, ore, recSchema, recInd, recLev)\n    return recipe, ore, recSchema, recInd, recLev\nend\n\nlinkDatabank()\ncommsdb.setStringValue(\"Req\",\"\")\ncommsdb.setStringValue(\"Res\",\"\")\ncommsdb.setStringValue(\"Cost\",\"\")\ncommsdb.setStringValue(\"schemaCost\",\"\")\ncommsdb.setStringValue(\"talentCost\",\"\")\n\ncacheList={}\ncacheList[#cacheList+1]=\"AlP\"\ncacheList[#cacheList+1]=\"SiP\"\ncacheList[#cacheList+1]=\"CP\"\ncacheList[#cacheList+1]=\"FeP\"\ncacheList[#cacheList+1]=\"CaP\"\ncacheList[#cacheList+1]=\"NaP\"\ncacheList[#cacheList+1]=\"ChP\"\ncacheList[#cacheList+1]=\"CuP\"\ncacheList[#cacheList+1]=\"LiP\"\ncacheList[#cacheList+1]=\"NiP\"\ncacheList[#cacheList+1]=\"AgP\"\ncacheList[#cacheList+1]=\"SP\"\ncacheList[#cacheList+1]=\"CoP\"\ncacheList[#cacheList+1]=\"Al-Fe Aly\"\ncacheList[#cacheList+1]=\"CaCu\"\ncacheList[#cacheList+1]=\"Sil\"\ncacheList[#cacheList+1]=\"Dur\"\ncacheList[#cacheList+1]=\"Ant S\"\ncacheList[#cacheList+1]=\"Table\"\ncacheList[#cacheList+1]=\"Adv StdF S\"\ncacheList[#cacheList+1]=\"Bsc GasC M\"\ncacheList[#cacheList+1]=\"Space Core M\"\ncacheList[#cacheList+1]=\"Military SpcE L\"\ncacheList[#cacheList+1]=\"Atmospheric Airbrake S\"\ncacheList[#cacheList+1]=\"Dynamic Core S\"\ncacheList[#cacheList+1]=\"Rar PwrC L\"\ncacheList[#cacheList+1]=\"Nitron Fuel\"\ncacheCount=0\n\nsystem.print(\"Version: \"..version)\nsystem.print(\"Initialising Cache\")\n\n--system.print(\"json test:\"..json.encode(cacheList))\n\nunit.hide()\nunit.setTimer(\"cache\",0.5)\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"local request = commsdb.getStringValue(\"Req\")\ncommsdb.setStringValue(\"Req\",\"\")\n--commsdb.setStringValue(\"oreCost\",\"\")\nlocal Cost = {}\nlocal schema=\"\"\nlocal ind={}\nlocal lev={}\nlocal Stat\nlocal test={}\n\nfunction buildSchemaJson(schema)\n    schemaStr = \"[\"\n    for _,v in pairs(schema) do\n        if #schemaStr > 1 then schemaStr=schemaStr..\",\" end\n        schemaStr=schemaStr..[[\"]]..v..[[\"]]\n    end\n    return schemaStr..\"]\"\nend\n\nfunction buildTalentJson(ind, lev)\n    talentStr = \"[\"\n    for i=1,#ind do\n        if #talentStr > 1 then talentStr=talentStr..\",\" end\n        talentStr=talentStr..[[{\"ind\":\"]]..ind[i]..[[\",\"lev\":]]..lev[i]..[[}]]\n    end\n    return talentStr..\"]\"\nend\n\nif not(request == \"\") then\n    --system.print(\"Request=\"..request)\n    local recipe = getRecipe( request )\n    --system.print(\"Recipe=\"..json.encode(recipe))\n    if recipe then\n        recipe, cost, schema, ind, lev=  calculateCost(recipe)   \n        commsdb.setStringValue(\"Res\",json.encode(recipe))\n        --talents = getTalents(schema)\n        --system.print(\"Talents=\"..json.encode(talents))\n        --talents={}\n        talentStr=buildTalentJson(ind, lev)\n--        system.print(\"talent str:\"..talentStr)\n        commsdb.setStringValue(\"oreCost\",json.encode(cost))\n        commsdb.setStringValue(\"schemaCost\",buildSchemaJson(schema))\n        commsdb.setStringValue(\"talentCost\",talentStr)\n    end\nend\ncollectgarbage(\"collect\")\n\n","filter":{"args":[{"value":"readReq"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"cacheCount = cacheCount + 1\n    \nif cacheCount > #cacheList then\n    unit.setTimer(\"readReq\",2)\n    unit.stopTimer(\"cache\")\n    system.print(\"Initialising Complete\")\nend\nif cacheList[cacheCount] then\n    --system.print(\"Recipe Name:\"..cacheList[cacheCount])\n    local recipe = getRecipe( cacheList[cacheCount] )\n    --system.print(\"Recipe:\"..json.encode(recipe))\n    if recipe then \n        --local ind, lev\n        recipe, cost, schema, ind, lev =calculateCost(recipe)\n        --dumpCache()\n    end\nend\n\n    \n    ","filter":{"args":[{"value":"cache"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"system.print(\"Cache\")\ndumpCache()\n","filter":{"args":[{"value":"option1"}],"signature":"actionStart(action)","slotKey":"-2"},"key":"3"}],"methods":[],"events":[]}
