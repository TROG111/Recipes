{"slots":{"0":{"name":"screen1","type":{"events":[],"methods":[]}},"1":{"name":"commsdb","type":{"events":[],"methods":[]}},"2":{"name":"storesdb","type":{"events":[],"methods":[]}},"3":{"name":"pldb","type":{"events":[],"methods":[]}},"4":{"name":"commsdb","type":{"events":[],"methods":[]}},"5":{"name":"commsdb","type":{"events":[],"methods":[]}},"6":{"name":"core","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-- this code goes in the screen.mousedown(*,*) trigger\n\nclickMouseX = x*1920\nclickMouseY = y*1120\nCheckClick(clickMouseX, clickMouseY,\"\")","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"0"},"key":"0"},{"code":"response = commsdb.getStringValue(\"Res\"..channel)\n\nif not(response == nil) and not(response == \"\") then\n\n    curRecipe = buildRecipe(response)\n\n    commsdb.setStringValue(\"Res\"..channel,\"\")\n    unit.stopTimer(\"sendReq\")\n    processingRecipe = false\n    nextRecipe = nextRecipe+1\n\n    buildProductionLine(curRecipe)\nend\n\n","filter":{"args":[{"value":"sendReq"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"\n-- table of abbreviations used in recipes and their decoded string values\nstringMap={}\nstringMap[\"nm\"]=\"name\"\nstringMap[\"ti\"]=\"tier\"\nstringMap[\"tp\"]=\"type\"\nstringMap[\"ms\"]=\"mass\"\nstringMap[\"vo\"]=\"volume\"\nstringMap[\"op\"]=\"outputQuantity\"\nstringMap[\"tm\"]=\"time\"\nstringMap[\"bp\"]=\"byproducts\"\nstringMap[\"in\"]=\"industries\"\nstringMap[\"ip\"]=\"input\"\nstringMap[\"Pu\"]=\"Pure\"\nstringMap[\"Np\"]=\"Nanopack\"\nstringMap[\"Rc\"]=\"Recycler\"\nstringMap[\"O2P\"]=\"Oxygen Pure\"\nstringMap[\"HP\"]=\"Hydrogen Pure\"\nstringMap[\"Re\"]=\"Refiner\"\nstringMap[\"Ind\"]=\"Industry\"\nstringMap[\"ChI\"]=\"Chemical Industry\"\nstringMap[\"Cat\"]=\"Catalyst\"\nstringMap[\"FeP\"]=\"Pure Iron\"\nstringMap[\"AlP\"]=\"Pure Aluminium\"\nstringMap[\"CP\"]=\"Pure Carbon\"\nstringMap[\"SiP\"]=\"Pure Silicon\"\nstringMap[\"CaP\"]=\"Pure Calcium\"\nstringMap[\"ChP\"]=\"Pure Chromium\"\nstringMap[\"CuP\"]=\"Pure Copper\"\nstringMap[\"NaP\"]=\"Pure Sodium\"\nstringMap[\"LiP\"]=\"Pure Lithium\"\nstringMap[\"NiP\"]=\"Pure Nickel\"\nstringMap[\"AgP\"]=\"Pure Silver\"\nstringMap[\"SP\"]=\"Pure Sulfur\"\nstringMap[\"CoP\"]=\"Pure Cobalt\"\nstringMap[\"FlP\"]=\"Pure Fluorine\"\nstringMap[\"AuP\"]=\"Pure Gold\"\nstringMap[\"ScP\"]=\"Pure Scandium\"\nstringMap[\"MnP\"]=\"Pure Manganese\"\nstringMap[\"NbP\"]=\"Pure Niobium\"\nstringMap[\"TiP\"]=\"Pure Titanium\"\nstringMap[\"VaP\"]=\"Pure Vanadium\"\nstringMap[\"Aly\"]=\"Alloy\"\nstringMap[\"Prd\"]=\"Product\"\nstringMap[\"Bsc\"]=\"Basic\"\nstringMap[\"Unc\"]=\"Uncommon\"\nstringMap[\"Adv\"]=\"Advanced\"\nstringMap[\"Smt\"]=\"Smelter\"\nstringMap[\"Asl\"]=\"Assembly Line\"\nstringMap[\"CaCu\"]=\"Calcium Reinforced Copper\"\nstringMap[\"StSt\"]=\"Stainless Steel\"\nstringMap[\"PlyC\"]=\"Polycarbonate Plastic\"\nstringMap[\"GlF\"]=\"Glass Furnace\"\nstringMap[\"AdvG\"]=\"Advanced Glass\"\nstringMap[\"ReiG\"]=\"Reinforced Glass\"\nstringMap[\"PlyA\"]=\"Polycalcite Plastic\"\nstringMap[\"PlyS\"]=\"Polysulfide Plastic\"\nstringMap[\"Sil\"]=\"Silumin\"\nstringMap[\"Stl\"]=\"Steel\"\nstringMap[\"Com\"]=\"Component\"\nstringMap[\"IntP\"]=\"Intermediary Part\"\nstringMap[\"ElcI\"]=\"Electronics Ind\"\nstringMap[\"Con\"]=\"Connector\"\nstringMap[\"Fix\"]=\"Fixation\"\nstringMap[\"3D\"]=\"3D Printer\"\nstringMap[\"Adv\"]=\"Advanced\"\nstringMap[\"MetI\"]=\"Metalwork Ind\"\nstringMap[\"Dur\"]=\"Duralumin\"\nstringMap[\"CpxP\"]=\"Complex Part\"\nstringMap[\"AtMC\"]=\"Antimatter Capsule\"\nstringMap[\"Brn\"]=\"Burner\"\nstringMap[\"Elec\"]=\"Electronics\"\nstringMap[\"ExpM\"]=\"Explosive Module\"\nstringMap[\"Hyd\"]=\"Hydraulics\"\nstringMap[\"Inj\"]=\"Injector\"\nstringMap[\"Scw\"]=\"Screw\"\nstringMap[\"Mgnt\"]=\"Magnet\"\nstringMap[\"PwrS\"]=\"Power System\"\nstringMap[\"Proc\"]=\"Processor\"\nstringMap[\"QCor\"]=\"Quantum Core\"\nstringMap[\"SinC\"]=\"Singularity Container\"\nstringMap[\"SWar\"]=\"Solid Warhead\"\nstringMap[\"AGC\"]=\"Anti-Gravity Core\"\nstringMap[\"QAU\"]=\"Quantum Alignment Unit\"\nstringMap[\"AMCU\"]=\"Antimatter Core\"\nstringMap[\"Ant\"]=\"Antenna\"\nstringMap[\"ChmC\"]=\"Chemical Container\"\nstringMap[\"CmbC\"]=\"Combustion Chamber\"\nstringMap[\"FunP\"]=\"Functional Part\"\nstringMap[\"ConS\"]=\"Control System\"\nstringMap[\"CorS\"]=\"Core System\"\nstringMap[\"ElcE\"]=\"Electric Engine\"\nstringMap[\"FirS\"]=\"Firing System\"\nstringMap[\"GasC\"]=\"Gas Cylinder\"\nstringMap[\"IonC\"]=\"Ionic Chamber\"\nstringMap[\"LasC\"]=\"Laser Chamber\"\nstringMap[\"MgtR\"]=\"Magnetic Rail\"\nstringMap[\"MecS\"]=\"Mechanical Sensor\"\nstringMap[\"MslS\"]=\"Missile Silo\"\nstringMap[\"MobP\"]=\"Mobile Panel\"\nstringMap[\"PwrC\"]=\"Power Converter\"\nstringMap[\"RobA\"]=\"Robotic Arm\"\nstringMap[\"Scn\"]=\"Screen\"\nstringMap[\"Cas\"]=\"Casing\"\nstringMap[\"ReiF\"]=\"Reinforced Frame\"\nstringMap[\"StrP\"]=\"Structural Part\"\nstringMap[\"StdF\"]=\"Standard Frame\"\nstringMap[\"Atmo\"]=\"Atmospheric\"\nstringMap[\"HnyR\"]=\"Honeycomb Rey\"\nstringMap[\"Ail\"]=\"Aileron\"\nstringMap[\"Hny\"]=\"Honeycomb\"\nstringMap[\"HnyP\"]=\"Pure Honeycomb\"\nstringMap[\"AtmoE\"]=\"Atmospheric Engine\"\nstringMap[\"SpcE\"]=\"Space Engine\"\nstringMap[\"Rar\"]=\"Rare\"\nstringMap[\"Mil\"]=\"Military\"\nstringMap[\"Mnv\"]=\"Maneuver\"\nstringMap[\"Frt\"]=\"Freight\"\nstringMap[\"AtA\"]=\"Atmospheric Airbrake\"\nstringMap[\"Cont\"]=\"Container\"\nstringMap[\"CabM\"]=\"Cable Model\"\nstringMap[\"RG\"]=\"Railgun\"\nstringMap[\"Mis\"]=\"Missile\"\nstringMap[\"AM\"]=\"Antimatter\"\nstringMap[\"Prec\"]=\"Precision\"\nstringMap[\"Hvy\"]=\"Heavy\"\nstringMap[\"Dfn\"]=\"Defense\"\nstringMap[\"ElMg\"]=\"ElectroMgntic\"\nstringMap[\"VBst\"]=\"Vertical Booster\"\nstringMap[\"HovE\"]=\"Hover Engine\"\nstringMap[\"CUn\"]=\"Core Unit\"\nstringMap[\"SpcC\"]=\"Space Core\"\nstringMap[\"DynC\"]=\"Dynamic Core\"\nstringMap[\"StaC\"]=\"Static Core\"\nstringMap[\"Fur\"]=\"Furniture\"\nstringMap[\"ExP\"]=\"Exceptional Part\"\nstringMap[\"Can\"]=\"Cannon\"\nstringMap[\"Kin\"]=\"Kinetic\"\nstringMap[\"Ther\"]=\"Thermic\"\n\n-- table containing mapping of recipe abbreviations and corresponding container names\nstoreMap={}\nstoreMap[\"Bsc RobA S\"]=\"sbroboticarm\"\nstoreMap[\"Bsc RobA M\"]=\"mbroboticarm\"\nstoreMap[\"Bsc RobA L\"]=\"lbroboticarm\"\nstoreMap[\"Bsc MobP XS\"]=\"xsbmobilepanel\"\nstoreMap[\"Bsc MobP S\"]=\"sbmobilepanel\"\nstoreMap[\"Bsc MobP M\"]=\"mbmobilepanel\"\nstoreMap[\"Bsc MobP L\"]=\"lbmobilepanel\"\nstoreMap[\"Bsc StdF XS\"]=\"xsbstandard\"\nstoreMap[\"Bsc StdF S\"]=\"sbstandard\"\nstoreMap[\"Bsc StdF M\"]=\"mbstandard\"\nstoreMap[\"Bsc StdF L\"]=\"lbstandard\"\nstoreMap[\"Bsc ReiF XS\"]=\"xsbreinforced\"\nstoreMap[\"Bsc ReiF S\"]=\"sbreinforced\"\nstoreMap[\"Bsc ReiF M\"]=\"mbreinforced\"\nstoreMap[\"Bsc ReiF L\"]=\"lbreinforced\"\nstoreMap[\"Rar ReiF L\"]=\"lrreinforced\"\nstoreMap[\"Rar CmbC L\"]=\"lrcombustion\"\nstoreMap[\"Bsc Com\"]=\"bcomponent\"\nstoreMap[\"Unc Com\"]=\"ucomponent\"\nstoreMap[\"Adv Com\"]=\"acomponent\"\nstoreMap[\"Bsc Con\"]=\"bconnector\"\nstoreMap[\"Unc Con\"]=\"uconnector\"\nstoreMap[\"Adv Con\"]=\"aconnector\"\nstoreMap[\"Bsc Elec\"]=\"belectronic\"\nstoreMap[\"Unc Elec\"]=\"uelectronic\"\nstoreMap[\"Adv Elec\"]=\"aelectronic\"\nstoreMap[\"Bsc Scw\"]=\"bscrew\"\nstoreMap[\"Unc Scw\"]=\"uscrew\"\nstoreMap[\"Adv Scw\"]=\"ascrew\"\nstoreMap[\"Bsc Pipe\"]=\"bpipe\"\nstoreMap[\"Unc Pipe\"]=\"upipe\"\nstoreMap[\"Adv Pipe\"]=\"apipe\"\nstoreMap[\"Bsc LED\"]=\"bled\"\nstoreMap[\"Unc LED\"]=\"uled\"\nstoreMap[\"Adv LED\"]=\"aled\"\nstoreMap[\"Bsc AtMC\"]=\"bantimatter\"\nstoreMap[\"Unc AtMC\"]=\"uantimatter\"\nstoreMap[\"Adv AtMC\"]=\"aantimatter\"\nstoreMap[\"Adv AMCU\"]=\"aamc\"\nstoreMap[\"Bsc QCor\"]=\"bquantumcore\"\nstoreMap[\"Unc QCor\"]=\"uquantumcore\"\nstoreMap[\"Adv QCor\"]=\"aquantumcore\"\nstoreMap[\"Adv QAU\"]=\"aqau\"\nstoreMap[\"Bsc Mgnt\"]=\"bmagnet\"\nstoreMap[\"Unc Mgnt\"]=\"umagnet\"\nstoreMap[\"Adv Mgnt\"]=\"amagnet\"\nstoreMap[\"Bsc Hyd\"]=\"bhydraulic\"\nstoreMap[\"Unc Hyd\"]=\"uhydraulic\"\nstoreMap[\"Adv Hyd\"]=\"ahydraulic\"\nstoreMap[\"Bsc SinC\"]=\"bsingularity\"\nstoreMap[\"Unc SinC\"]=\"usingularity\"\nstoreMap[\"Adv SinC\"]=\"asingularity\"\nstoreMap[\"Bsc Brn\"]=\"bburner\"\nstoreMap[\"Unc Brn\"]=\"uburner\"\nstoreMap[\"Adv Brn\"]=\"aburner\"\nstoreMap[\"Rar Brn\"]=\"rburner\"\nstoreMap[\"Bsc PwrS\"]=\"bpowerunit\"\nstoreMap[\"Unc PwrS\"]=\"upowerunit\"\nstoreMap[\"Adv PwrS\"]=\"apowerunit\"\nstoreMap[\"Bsc Inj\"]=\"binjector\"\nstoreMap[\"Unc Inj\"]=\"uinjector\"\nstoreMap[\"Adv Inj\"]=\"ainjector\"\nstoreMap[\"Rar Inj\"]=\"rinjector\"\nstoreMap[\"Bsc Fix\"]=\"bfixation\"\nstoreMap[\"Unc Fix\"]=\"ufixation\"\nstoreMap[\"Adv Inj\"]=\"afixation\"\nstoreMap[\"Bsc Proc\"]=\"bprocessor\"\nstoreMap[\"Unc Proc\"]=\"uprocessor\"\nstoreMap[\"Adv Proc\"]=\"aprocessor\"\nstoreMap[\"SiP\"]=\"silicon\"\nstoreMap[\"AlP\"]=\"aluminium\"\nstoreMap[\"FeP\"]=\"iron\"\nstoreMap[\"CP\"]=\"carbon\"\nstoreMap[\"NaP\"]=\"sodium\"\nstoreMap[\"ChP\"]=\"chromium\"\nstoreMap[\"CaP\"]=\"calcium\"\nstoreMap[\"CuP\"]=\"copper\"\nstoreMap[\"AgP\"]=\"silver\"\nstoreMap[\"NiP\"]=\"nickel\"\nstoreMap[\"LiP\"]=\"lithium\"\nstoreMap[\"SP\"]=\"sulfer\"\nstoreMap[\"AuP\"]=\"gold\"\nstoreMap[\"FlP\"]=\"fluorine\"\nstoreMap[\"ScP\"]=\"scandium\"\nstoreMap[\"CoP\"]=\"cobalt\"\nstoreMap[\"MnP\"]=\"manganese\"\nstoreMap[\"NbP\"]=\"niobium\"\nstoreMap[\"TiP\"]=\"titanium\"\nstoreMap[\"VaP\"]=\"vanadium\"\nstoreMap[\"Stl\"]=\"steel\"\nstoreMap[\"Al-Fe Aly\"]=\"alfe\"\nstoreMap[\"CaCu\"]=\"cacu\"\nstoreMap[\"StSt\"]=\"stainless\"\nstoreMap[\"Sil\"]=\"silumin\"\nstoreMap[\"Dur\"]=\"duramin\"\nstoreMap[\"PlyA\"]=\"polycalcite\"\nstoreMap[\"PlyC\"]=\"polycarbonate\"\nstoreMap[\"Glass\"]=\"glass\"\nstoreMap[\"AdvG\"]=\"aglass\"\nstoreMap[\"Ag-Li ReiG\"]=\"agliglass\"\nstoreMap[\"Cu-Ag Aly\"]=\"agcu\"\nstoreMap[\"PlyS\"]=\"polysulfide\"\nstoreMap[\"Inconel\"]=\"inconel\"\nstoreMap[\"Al-Li Aly\"]=\"alli\"\nstoreMap[\"Maraging Stl\"]=\"maraging\"\nstoreMap[\"Sc-Al Aly\"]=\"scal\"\nstoreMap[\"Red Gold\"]=\"redgold\"\nstoreMap[\"Fluoropolymer\"]=\"polyfluoride\"\nstoreMap[\"Warp Cell\"]=\"warpcell\"\nstoreMap[\"Rar Mil AtmoE L\"]=\"lrmilatmo\"\nstoreMap[\"O2P\"]=\"oxygen\"\nstoreMap[\"HP\"]=\"hydrogen\"\nstoreMap[\"Cat 3\"]=\"cat3\"\nstoreMap[\"Cat 4\"]=\"cat4\"\n\nfunction string:map(delimiter,maxLen)\n  local result = { }\n  local from  = 1\n  if not(delimeter) then delimiter = \" \" end\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do\n    subStr = string.sub( self, from , delim_from-1 )\n    resultMap = stringMap[subStr]\n    if resultMap == nil or resultMap == \"\" then\n        resultMap = subStr\n    end\n    mapped = mapped..resultMap..\" \"\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  subStr = string.sub( self, from  )\n  resultMap = stringMap[subStr]\n  if resultMap == nil or resultMap == \"\" then\n    resultMap = subStr\n  end\n  mapped = mapped..resultMap\n  if maxLen > 0 and string.len(mapped) > maxLen then\n      return self\n  else\n      return mapped\n  end\nend","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"2"},{"code":"function initiateRequiredLibaries()\n    json = require('dkjson')\nend\nif pcall(initiateRequiredLibaries) then\n    system.print(\"Libaries loaded successfully\")\n    else\n    system.print(\"Libaries failed to load: check that the following libraries exist:\")\n    system.print(\"(<ProgrmData> is the directory in to which you installed DU)\")\n    system.print(\"    <ProgrmData>/DualUniverse/Game/data/lua/dkjson\")\n    system.print(\"\")\n    unit.exit()\nend\n\n--jsa = require('cpml/json-a')\n\nversion = \"0_0_1\"\nchannel = 3 --export: recipe server channel (1 to 5)\nProdLine = \"Warp Cell\" --export\n\ncurRecipe = {}\ncurIngred = {}\nreqType = \"R\"\nrecipeQueue = {}\nlocal BackgroundColor = \"#1e1e1e\"\n--[[ Default colours are 34b1eb and 6e3de3]]\nlocal RecPanelColour = \"99eeff\" --export Set the background color of the recipe Panel. YOU NEED TO LEAVE THE QUOTATION\nlocal IngPanelColour = \"aa99ff\" --export Set the background color of the Igredients panel. YOU NEED TO LEAVE THE QUOTATION\nlocal FontPanelColour = \"000000\" --export: Hex code for font colour of planet/locations panel (you need to include the quotes)\nlocal LineHighlightColour = \"ccffff\"--export: Hex code for colour of highlighted lines in planet/location panel (you need to include the quotes)\n\nlocal RecipeBackgroundColor = \"#\" ..RecPanelColour\nlocal IngredBackgroundColor = \"#\" ..IngPanelColour\nlocal MainFontColor = \"#\"  .. FontPanelColour\nlocal HighlightColor = \"#\"  .. LineHighlightColour\nlocal clickAreas = {}\nlocal recipeLines=12\nlocal CurrentRecipePage = 1\nlocal indexCount=0\nstockWarnings = 0\nindWarnings = 0\n        \nfunction commerise(amount)\n  if amount==\"NA\" or amount == nil then return \"NA\" end\n  local formatted = amount\n  while true do  \n    formatted, k = string.gsub(formatted, \"^(-?%d+)(%d%d%d)\", '%1,%2')\n    if (k==0) then\n      break\n    end\n  end\n  return formatted\nend\n\nfunction string:split(delimiter,maxLen)\n    --system.print(\"Self:\"..self)\n  if not(delimeter) then delimiter = \" \" end\n  local result = { }\n  local from  = 1\n  local delim_from, delim_to = string.find( self, delimiter, from  )\n  local mapped = \"\"\n  if maxLen == nil then maxLen=0 end\n  while delim_from do   \n    table.insert( result, string.sub( self, from , delim_from-1 ) )\n    subStr = string.sub( self, from , delim_from-1 )\n    from  = delim_to + 1\n    delim_from, delim_to = string.find( self, delimiter, from  )\n  end\n  table.insert( result, string.sub( self, from  ) )\n  subStr = string.sub( self, from  )\n  return result\nend\n\nfunction buildRecipe(recipeStr)\n     return json.decode(recipeStr)\nend\n\nfunction reqRecipe(recipeName)\n    reqType = \"R\"\n    commsdb.setStringValue(\"Req\"..channel,recipeName)\n    unit.setTimer(\"sendReq\",0.5)\nend\nfunction reqIngred(ingredName)\n    reqType = \"I\"\n    commsdb.setStringValue(\"Req\"..channel,ingredName)\n    unit.setTimer(\"sendReq\",0.5)\nend\nfunction qRecipe(recipeName)\n    for i=nextRecipe,#recipeQueue do\n        if recipeQueue[i] == recipeName then return 0 end\n    end\n    recipeQueue[#recipeQueue+1]=recipeName\nend\n\nfunction getStoreQty(ingredName)\n    local containerName = storeMap[ingredName]\n    if not(containerName==nil) and not(containerName==\"\") then\n        --system.print(ingredName..\" Qty=\"..listStockContainers[containerName][3])\n        return math.floor(listStockContainers[containerName][3],1)\n    else\n        return 0\n    end\nend\n\n-- Extracts values from a JSON string with pattern matching\n-- This is faster than using dkjson when only a few fields are needed\n\n-- Use this only with trusted data sources! Limitations:\n-- * Character escapes are not supported\n-- * Field nesting is ignored\n\nlocal find, gsub = string.find, string.gsub\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return string|nil, number|nil, number|nil\nlocal function extractStringJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*\"([^\"]*)\"]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return valueStr, startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return number|nil, number|nil, number|nil\nlocal function extractNumberJsonValue (json, key, init)\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\n  return tonumber(valueStr), startIndex, endIndex\nend\n\n---@param json string\n---@param key string\n---@param init number|nil\n---@return list|nil, number|nil, number|nil\nlocal function extractListJsonValue (json, key, init)\n  --local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][%g%s]]..\"^]\"..[[]*[]]..\"]\"..\"])\"\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*([[][]]..\"^]\"..[[]*[]]..\"]\"..\"])\"\n  --system.print(\"json=\"..json)\n  --system.print(\"pattern=\"..pattern)\n  local startIndex, endIndex, valueStr = string.find(json, pattern, init)\n  --system.print(\"valueStr=\"..valueStr)\n  return valueStr, startIndex, endIndex\nend\n\n--testStr = [[\"test\":\"asd\", \"ingred\":]]..\"[{\"..[[\"abc\":\"edf\",\"xxx\":10]]..\"},{\"..[[\"abc\":\"edf\",\"xxx\":10]]..\"}][asdfasd]\"\n--system.print(\"testStr:\"..testStr)\n--test = extractListJsonValue(testStr,\"ingred\",1)\n--system.print(\"test:\"..test)\n--unit.exit()\n\n---@param extractJsonValue function\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue any|nil\n---@return any[]\nlocal function extractAllJsonValues (extractJsonValue, json, key, stopAfterIndex, stopAfterValue)\n  local values = {}\n  local valuesLen = 0\n\n  local jsonPos = 1\n  local value, valueStartIndex, valueEndIndex -- luacheck: ignore valueStartIndex -- unused\n\n  repeat\n    value, valueStartIndex, valueEndIndex = extractJsonValue(json, key, jsonPos)\n\n    if value ~= nil then\n      valuesLen = valuesLen + 1\n      values[valuesLen] = value\n\n      jsonPos = valueEndIndex + 1\n    end\n\n    if value == stopAfterValue then break end\n    if valuesLen == stopAfterIndex then break end\n  until value == nil\n\n  return values\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue string|nil\n---@return string[]\nlocal function extractAllStringJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractStringJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\n---@param json string\n---@param key string\n---@param stopAfterIndex number|nil\n---@param stopAfterValue number|nil\n---@return number[]\nlocal function extractAllNumberJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractNumberJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nlocal function extractAllListJsonValues (json, key, stopAfterIndex, stopAfterValue)\n  return extractAllJsonValues(extractListJsonValue, json, key, stopAfterIndex, stopAfterValue)\nend\n\nstockVolume = {}\nstockFlag = {}\nstockName={}\nfunction getStockData()\n    local stockStr=storesdb.getStringValue(\"stockData\")\n    --system.print(stockStr)\n    local locStockNames = extractAllStringJsonValues(stockStr,\"name\")\n    local locStockVolume = extractAllNumberJsonValues(stockStr,\"stock\")\n    local locStockFlag = extractAllStringJsonValues(stockStr,\"flag\")\n    \n    for i=1,#locStockNames do\n        stockName[i]=locStockNames[i]\n        --system.print(\"Stock: \"..stockName[i])\n        stockVolume[locStockNames[i]]=locStockVolume[i]\n        --system.print(\"Volume: \"..stockVolume[locStockNames[i]])\n        stockFlag[locStockNames[i]]=locStockFlag[i]\n        --system.print(\"Flag: \"..stockFlag[locStockNames[i]])\n    end\n    stockName[#stockName+1]= \"cat3\"\n    stockVolume[\"cat3\"]=0\n    stockFlag[\"cat3\"]=\"N\"\n    stockName[#stockName+1]= \"cat4\"\n    stockVolume[\"cat4\"]=0\n    stockFlag[\"cat4\"]=\"N\"\nend\n\n-----------------------------------------------\n-- Code for monitoring industries and obtaining schematics\n-----------------------------------------------\nlocal industries = {}\nindustries[#industries+1] = \"electronics\"\nindustries[#industries+1] = \"metalwork\"\nindustries[#industries+1] = \"glass\"\nindustries[#industries+1] = \"smelter\"\nindustries[#industries+1] = \"refiner\"\nindustries[#industries+1] = \"recycler\"\nindustries[#industries+1] = \"chemical\"\nindustries[#industries+1] = \"assembly\"\nindustries[#industries+1] = \"3d\"\n\nfunction isIndustry(elem)\n    for i=1,#industries do\n        if elem == industries[i] then return true end\n    end\n    return false\nend\n\n\nfunction getIndData()\n    indUID = {}\n    indName = {}\n    indType={}\n    indState={}\n    indSchema={}\n    indTime={}\n    local indStr=storesdb.getStringValue(\"industryData\")\n    --system.print(indStr)\n    local locIndUID  = extractAllNumberJsonValues(indStr,\"uid\")\n    local locIndTime = extractAllStringJsonValues(indStr,\"time\")\n    local locIndName = extractAllStringJsonValues(indStr,\"name\")\n    local locIndType = extractAllStringJsonValues(indStr,\"type\")\n    local locIndState = extractAllStringJsonValues(indStr,\"state\")\n    local locIndSchema = extractAllStringJsonValues(indStr,\"schema\")\n    \n    --system.print(json.encode(locIndSchema))\n    \n    for i=1,#locIndUID do\n        indUID[i]=locIndUID[i]\n        indName[i]=locIndName[i]\n        indType[i]=locIndType[i]\n        indState[i]=locIndState[i]\n        indSchema[i]=locIndSchema[i]\n        indTime[i] = locIndTime[i]\n    end\nend\n\nfunction getIndustry(schema)\n    local tempSchema = string.lower(schema:map())\n    if tempSchema == \"pure nickel\" then tempSchema = \"nickel pure\" end\n    if tempSchema == \"pure silver\" then tempSchema = \"silver pure\" end\n    if tempSchema == \"hydrogen pure\" then return -1 end\n    if tempSchema == \"oxygen pure\" then return -1 end\n    if schema == \"Cat 3\" then return -1 end\n    if schema == \"Cat 4\" then return -1 end\n    --system.print(\"schema:\"..tempSchema)\n    local tempUIDs={}\n    for i=1,#indUID do\n        local tempIndSchema = string.lower(indSchema[i])\n--        if tempSchema == \"nickel pure\" then system.print(\"schema:\"..tempIndSchema) end\n        if tempIndSchema==tempSchema or\n           tempIndSchema==string.format(\"%s product\",tempSchema) or \n           tempIndSchema==string.format(\"%s alloy\",tempSchema) then \n            tempUIDs[#tempUIDs+1] = i\n        end                \n    end  \n    if tempUIDs == {} then\n        system.print(\"Unknown Industry Schema: \"..tempSchema)\n        return 0\n    else\n--        if tempSchema == \"nickel pure\" then system.print(\"uids:\"..json.encode(tempUIDs)) end\n        return tempUIDs\n    end\nend\n\nrecipeList={}\ndisplayLine={}\ntempLine={}\nfunction buildProductionLine(recipe)\n    if recipe.tp==\"Ore\" or recipeList[recipe.nm] then \n        recipeList[recipe.nm]=true\n        return 0 \n    end\n    local screenLine = {}\n    screenLine.recipe = recipe.nm\n    screenLine.ingred = {}\n    for i,v in pairs(recipe.ip) do\n        local ingred = {} \n        ingred.ingred = i\n        ingred.amt = v\n        screenLine.ingred[#screenLine.ingred+1]=ingred\n    end\n    local stockName = storeMap[recipe.nm]\n    if stockName == nil then\n        system.print(\"Unknown Storage: \"..recipe.nm)\n        screenLine.stock = \"NA\"\n        screenLine.stockFlag = \"NA\"\n    else\n        screenLine.stock = stockVolume[stockName]\n        screenLine.stockFlag = stockFlag[stockName]\n    end\n    screenLine.industry={}\n    local indID = getIndustry(recipe.nm)\n    if indID==nil or indID==0 then\n        local tempInd = {}\n        tempInd.industry = \"NA\"\n        tempInd.state = \"NA\"\n        tempInd.time = \"NA\"\n        screenLine.industry[1] = tempInd\n    elseif indID == -1 then\n        local tempInd = {}\n        tempInd.industry = \"Ignored\"\n        tempInd.state = \"0\"\n        tempInd.time = \"NA\"\n        screenLine.industry[1] = tempInd\n    else\n        for i=1,#indID do\n            local tempInd = {}\n            tempInd.industry = indName[indID[i]]\n            tempInd.state = indState[indID[i]]\n            tempInd.time = indTime[indID[i]]\n            screenLine.industry[i] = tempInd\n        end\n    end   \n    tempLine[#tempLine+1]=screenLine\n    --system.print(\"PL: \"..json.encode(tempLine[#tempLine]))\n    if not(screenLine.stockFlag == \"N\") then stockWarnings = stockWarnings+1 end\n\n    recipeList[recipe.nm]=true\n    for i, v in pairs(recipe.ip) do\n        if not(recipeList[i]) then qRecipe(i)\n        end\n    end\nend\n\nfunction monitorProductionLine()\n    for i=1,#tempLine do\n        local stockName = storeMap[tempLine[i].recipe]\n        if stockName == nil then\n            tempLine[i].stock = \"NA\"\n            tempLine[i].stockFlag = \"NA\"\n        else\n            tempLine[i].stock = stockVolume[stockName]\n            tempLine[i].stockFlag = stockFlag[stockName]\n        end\n        tempLine[i].industry={}\n        local indID = getIndustry(tempLine[i].recipe)\n        --system.print(tempLine[i].recipe..\" = \"..json.encode(indID))\n        if indID==nil or indID==0 then\n            local tempInd = {}\n            tempInd.industry = \"NA\"\n            tempInd.state = \"NA\"\n            tempInd.time = \"NA\"\n            tempLine[i].industry[1] = tempInd\n            --system.print(\"Warning1:\"..tempLine[i].recipe)\n            indWarnings=indWarnings+1 \n        elseif indID == -1 then\n            local tempInd = {}\n            tempInd.industry = \"Ignored\"\n            tempInd.state = \"0\"\n            tempInd.time = \"NA\"\n            tempLine[i].industry[1] = tempInd\n        else\n            for j=1,#indID do\n                local tempInd = {}\n                tempInd.industry = indName[indID[j]]\n                tempInd.state = indState[indID[j]]\n                tempInd.time = indTime[indID[j]]\n--                system.print(j..\" ind data=\"..json.encode(tempInd))\n                if not(tempInd.state==\"RUNNING\") and\n                   not(tempInd.state==\"JAMMED_OUTPUT_FULL\") and\n                   not(tempInd.state==\"PENDING\") then\n                    --system.print(\"Warning2:\"..tempLine[i].recipe)\n                    indWarnings=indWarnings+1 \n                end\n                tempLine[i].industry[j] = tempInd\n            end\n            --system.print(json.encode(tempLine[i]))\n        end   \n        if not(tempLine[i].stockFlag == \"N\") then stockWarnings = stockWarnings+1 end\n    end\nend\n\nfunction storeProductionLine()\n    local prodLineStr = \"[\"\n    for i = 1, #tempLine do\n        if tempLine[i].stockFlag==nil then system.print(\"Flag: \"..tempLine[i].recipe) end\n        if i > 1 then prodLineStr = prodLineStr..\",\" end\n        prodLineStr = prodLineStr..[[{\"recipe\":\"]]..tempLine[i].recipe..\n            [[\",\"stock\":\"]]..tempLine[i].stock..\n            [[\",\"stockFlag\":\"]]..tempLine[i].stockFlag..[[\",\"ingred\":]]..\"[\"\n            if tempLine[i].ingred == nil then\n                prodLineStr = prodLineStr..\"]\"\n            else\n                for j=1,#tempLine[i].ingred do\n                    if j>1 then prodLineStr = prodLineStr..\",\" end\n                    prodLineStr = prodLineStr..[[{\"xxx\":\"]]..\n                        tempLine[i].ingred[j].ingred..[[\",\"amt\":]]..\n                        tempLine[i].ingred[j].amt..\"}\"\n                end\n            end\n            prodLineStr = prodLineStr..[[]}]]\n    end\n    prodLineStr = prodLineStr..\"]\"\n    --system.print(prodLineStr)\n    pldb.setStringValue(ProdLine,prodLineStr)\nend\n\nfunction loadProductionLine(prodLineStr)\n    tempLine={}\n    --system.print(prodLineStr)\n    local pdRecipe = extractAllStringJsonValues(prodLineStr,\"recipe\")\n    local pdStock = extractAllStringJsonValues(prodLineStr,\"stock\")\n    local pdStockFlag = extractAllStringJsonValues(prodLineStr,\"stockFlag\")\n    local pdIngred = extractAllListJsonValues(prodLineStr,\"ingred\")\n    for i=1,#pdRecipe do\n        local prodLineData={}\n        local ingredStr = \"\"\n        prodLineData.recipe = pdRecipe[i]\n        prodLineData.stock = pdStock[i]\n        prodLineData.stockFlag = pdStockFlag[i]\n        --system.print(\"recipe=\"..prodLineData.recipe)\n        ingredStr = pdIngred[i]\n        --system.print(\"ingredStr=\"..ingredStr)\n        local ingredName = extractAllStringJsonValues(ingredStr,\"xxx\")\n        local ingredAmt = extractAllNumberJsonValues(ingredStr,\"amt\")\n        prodLineData.ingred={}\n        for j=1,#ingredName do\n            local ingred={}\n            --system.print(\"ingred=\"..ingredName[j])\n            ingred.ingred = ingredName[j]\n            ingred.amt=ingredAmt[j]\n            prodLineData.ingred[#prodLineData.ingred+1] = ingred\n        end\n        tempLine[#tempLine+1]=prodLineData\n        --system.print(json.encode(prodLineData))\n    end\nend\n\nfunction DrawSVG(output,screen) screen.setSVG(output) end\n\nfunction AddClickArea(newEntry) table.insert(clickAreas, newEntry) end\n\nfunction RemoveFromClickAreas(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = nil\n            break\n        end\n    end\nend\n\nfunction UpdateClickArea(candidate, newEntry)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            clickAreas[k] = newEntry\n            break\n        end\n    end\nend\n\nfunction DisableClickArea(candidate)\n    for k, v in pairs(clickAreas) do\n        if v.id == candidate then\n            UpdateClickArea(candidate, {\n                id = candidate,\n                x1 = -1,\n                x2 = -1,\n                y1 = -1,\n                y2 = -1\n            })\n            break\n        end\n    end\nend\n\nfunction InitiateClickAreas()\n    clickAreas = {}\n  \n    AddClickArea({id = \"RecipePageDown\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n    AddClickArea({id = \"RecipePageUp\", x1 = -1, x2 = -1, y1 = -1, y2 = -1})\n\nend\nInitiateClickAreas()\nfunction FlushClickAreas() clickAreas = {} end\n\nfunction CheckClick(x, y, HitTarget)\n    HitTarget = HitTarget or \"\"\n    --system.print(\"x=\"..x..\" y=\"..y)\n    if HitTarget == \"\" then\n        for k, v in pairs(clickAreas) do\n            if v and x >= v.x1 and x <= v.x2 and y >= v.y1 and y <= v.y2 then\n                HitTarget = v.id\n                break\n            end\n        end\n    end\n  \n    --system.print(\"Target Hit = \"..HitTarget)\n    \n    if HitTarget == \"RecipePageDown\" then\n        CurrentRecipePage = CurrentRecipePage+1\n        DrawRecipeList()\n    elseif HitTarget == \"RecipePageUp\" then\n        CurrentRecipePage = math.max(CurrentRecipePage-1,0)\n        DrawRecipeList()\n    end\nend\n\n--function statusMap( itemStatus )\n--    local result = \"NA\"\n--    if itemStatus == \"JAMMED_MISSING_INGREDIENT\" then\n--        result = \"IP MISSING\"\n--    elseif itemStatus == \"STOPPED\" then\n--        result = \"STOPPED\"\n--    elseif itemStatus == \"RUNNING\" then\n--        result = \"RUNNING\"\n--    elseif itemStatus == \"JAMMED_OUTPUT_FULL\" then\n--        result = \"OP FULL\"\n--    elseif itemStatus == \"JAMMED_NO_OUTPUT_CONTAINER\" then\n--        result = \"OP MISSING\"\n--    elseif itemStatus == \"PENDING\" then\n--        result = \"PENDING\"\n--    elseif itemStatus == nil then\n --       result = \"ERROR\"\n --   end\n--    return result\n--end\n\nlocal svgBootstrap = [[<svg class=\"bootstrap\" viewBox=\"0 0 1920 1120\" width=\"1920\" height=\"1120\">\n                <defs><style>\n                      .ftitle { font-size: 60px; text-anchor: start;fill: white; }\n                      .ftitlew { font-size: 60px; text-anchor: start;fill: red; }\n                      .ftitle2 { font-size: 60px; text-anchor: start;fill: #565656; }\n                      .ftopmiddle { font-size: 40px; text-anchor: middle;}\n                      .ftopend { font-size: 40px; text-anchor: end;}\n                      .fcapstart { font-size: 30px; text-anchor: start; fill: white;}\n                      .fcapstarthy { font-size: 30px; text-anchor: start; fill: yellow;}\n                      .fcapstarthr { font-size: 30px; text-anchor: start; fill: red;}\n                      .fcapmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fcapend { font-size: 30px; text-anchor: end; fill: #1e1e1e;}\n                      .fcapendw { font-size: 30px; text-anchor: end; fill: white;}\n                      .fmstart { font-size: 25px; text-anchor: start; fill: white;}\n                      .fmstartr { font-size: 25px; text-anchor: start; fill: red;}\n                      .fmschema { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmschemag { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                      .fmdesc { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartg { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                      .fmstartp { font-size: 25px; text-anchor: start; fill:]]..RecipeBackgroundColor..[[;}\n                      .fmstartl { font-size: 25px; text-anchor: start; fill:]]..IngredBackgroundColor..[[;}\n                      .fmstarty { font-size: 25px; text-anchor: start; fill: #aaaa00;}\n                      .fmstartr { font-size: 25px; text-anchor: end; fill: #ff0000;}\n                      .fmmiddle { font-size: 30px; text-anchor: middle; fill: white;}\n                      .fmmiddleb { font-size: 30px; text-anchor: middle; fill: black;}\n                      .fmmiddler { font-size: 30px; text-anchor: middle; fill: red;}\n                      .fmend { font-size: 25px; text-anchor: end; fill: ]]..MainFontColor..[[;}\n                      .fmendg { font-size: 25px; text-anchor: end; fill: white;}\n                      .fmendy { font-size: 25px; text-anchor: end; fill: yellow;}\n                      .fmingreddesc { font-size: 25px; text-anchor: start; fill: ]]..MainFontColor..[[;}\n                </style></defs>]]\n\nfunction indDispStr(industry)\n    if industry == nill then return \"ERROR\" end\n    if industry.state == \"RUNNING\" then return string.format(\"R (%s)\",industry.time)\n    elseif industry.state == \"PENDING\" then return \"PENDING\"\n    elseif industry.state == \"JAMMED_MISSING_INGREDIENT\" then return \"IP MISSING\"\n    elseif industry.state == \"STOPPED\" then return \"STOPPED\"\n    elseif industry.state == \"JAMMED_OUTPUT_FULL\" then return \"PENDING\"\n    elseif industry.state == \"0\" then return \"IGNORED\"\n    else return \"ERROR\"\n    end\nend\n\nfunction getIngred(ingred)\n    for i=1,#displayLine do\n        if string.lower(ingred) == string.lower(displayLine[i].recipe) then return i end\n    end\n    return 0\nend\n\nfunction missingIngred(displayRecord)\n    missingStr=\"\"\n    for i=1,#displayRecord.ingred do\n        reqIngred = displayRecord.ingred[i].ingred\n        ingredId=getIngred(reqIngred)\n        reqAmt = displayRecord.ingred[i].amt\n        stockAmt = stockVolume[storeMap[reqIngred]]\n        if not(stockAmt==nil) then\n            shortage = reqAmt - stockAmt\n            if shortage > 0 then \n                missingStr = missingStr ..\"[\".. ingredId .. \"] = \"..shortage..\" \"\n            end\n        else\n            missingStr = missingStr ..reqIngred .. \"= NA \"\n        end\n    end\n    return missingStr\nend\n    \nfunction DrawRecipeList()\n    --table.sort(displayLine)\n    local screenOutput = \"\"\n\n        -- Draw Header\n    screenOutput = screenOutput .. svgBootstrap\n                           \n        -- Draw main background\n    screenOutput = screenOutput ..\n                       [[<rect width=\"1920\" height=\"1120\" style=\"fill: #]]..BackgroundColor..[[\"/><g></g>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"70\" y=\"120\" class=\"ftitle\">]]..ProdLine:map()..[[</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1900\" y=\"120\" class=\"fmstartr\">Version: ]]..version..[[</text>]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"150\" rx=\"10\" ry=\"10\" width=\"1800\" height=\"]] ..\n                       ((recipeLines + 1) * 55) ..\n                       [[\" style=\"fill:]].. RecipeBackgroundColor .. [[;stroke:#ffff00;stroke-width:3;\" />]]\n    screenOutput = screenOutput ..\n                       [[<rect x=\"80\" y=\"160\" rx=\"5\" ry=\"5\" width=\"1790\" height=\"40\" style=\"fill:#33331a;\" />]]      \n    screenOutput = screenOutput ..\n                       [[<text x=\"90\" y=\"191\" class=\"fcapstart\">Component Name</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"700\" y=\"191\" class=\"fcapstart\">Stock</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"900\" y=\"191\" class=\"fcapstart\">Industries</text>]]\n    screenOutput = screenOutput ..\n                       [[<text x=\"1600\" y=\"191\" class=\"fcapstart\">{Missing Imput}</text>]]\n           \n\n    local indexCount=#displayLine\n    local i=1\n    boldLine=false\n    for j = 1 + (CurrentRecipePage - 1) * recipeLines, recipeLines +\n                (CurrentRecipePage - 1) * recipeLines, 1 do\n        if boldLine then boldLine = false else boldLine = true\n            screenOutput = screenOutput ..\n                       [[<rect x=\"70\" y=\"]]..(210 + i * 55) .. \n                       [[\" width=\"1800\" height=\"55\"]] ..\n                       [[\" style=\"fill:]].. \"#b0fffa\" .. [[;\" />]]\n        end\n        if j < #displayLine and j>0 then\n            local lineY = (180 + i * 55)\n            screenOutput = screenOutput .. [[<text x=\"90\" y=\"]] ..\n                                   lineY .. [[\" class=\"fmstartg\">]] ..\n                                   \"[\"..j..\"]\" .. [[</text>]]\n            screenOutput = screenOutput .. [[<text x=\"150\" y=\"]] ..\n                                   lineY .. [[\" class=\"fmstartg\">]] ..\n                                   displayLine[j].recipe:map() .. [[</text>]]\n            if not(displayLine[j].stockFlag == \"N\") then\n                screenOutput = screenOutput .. [[<text x=\"680\" y=\"]] ..\n                                   lineY .. [[\" class=\"fmstartr\">**</text>]]\n            end\n            screenOutput = screenOutput .. [[<text x=\"700\" y=\"]] ..\n                                   lineY .. [[\" class=\"fmstartg\">]] ..\n                                   commerise(displayLine[j].stock) .. [[</text>]]\n            if not(displayLine[j].industry == nil) then\n                if not(indDispStr(displayLine[j].industry[1]) == \"IGNORED\") then\n                    screenOutput = screenOutput .. [[<text x=\"850\" y=\"]] ..\n                                   lineY .. [[\" class=\"fmstartg\">]] ..\n                                   #displayLine[j].industry .. [[---</text>]]\n                end\n                local missingInput=false\n                if not(displayLine[j].industry[1] == nil) then\n                    screenOutput = screenOutput .. [[<text x=\"900\" y=\"]] ..\n                                       lineY .. [[\" class=\"fmstartg\">]] ..\n                                       indDispStr(displayLine[j].industry[1]) .. [[</text>]]\n                    if displayLine[j].industry[1].state == \"JAMMED_MISSING_INGREDIENT\" then\n                        missingInput=true\n                    end\n                end\n                if not(displayLine[j].industry[2] == nil) then\n                    screenOutput = screenOutput .. [[<text x=\"1200\" y=\"]] ..\n                                       lineY .. [[\" class=\"fmstartg\">]] ..\n                                       indDispStr(displayLine[j].industry[2]) .. [[</text>]]\n                    if displayLine[j].industry[2].state == \"JAMMED_MISSING_INGREDIENT\" then\n                        missingInput=true\n                    end\n                end\n                if not(displayLine[j].industry[3] == nil) then\n                    screenOutput = screenOutput .. [[<text x=\"1500\" y=\"]] ..\n                                       lineY .. [[\" class=\"fmstartg\">]] ..\n                                       indDispStr(displayLine[j].industry[3]) .. [[</text>]]\n                    if displayLine[j].industry[3].state == \"JAMMED_MISSING_INGREDIENT\" then\n                        missingInput=true\n                    end\n                end\n                if missingInput then\n                    screenOutput = screenOutput .. [[<text x=\"1800\" y=\"]] ..\n                                       (200 + i * 55) .. [[\" class=\"fmstartr\">]] ..\n                                       missingIngred(displayLine[j]) .. [[</text>]]\n                    --system.print(missingIngred(displayLine[j]))\n                end\n            end\n        end\n        i=i+1\n    end\n   \n    if indexCount > recipeLines then\n                screenOutput = screenOutput ..\n                                   [[<text x=\"70\" y=\"1000\" class=\"fmstartp\">Page ]] ..\n                                   CurrentRecipePage .. \" of \" ..\n                                   math.ceil(indexCount / recipeLines) ..\n                                   [[</text>]]\n\n        if CurrentRecipePage < math.ceil(indexCount / recipeLines) then\n            screenOutput = screenOutput .. [[<svg x=\"70\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..RecipeBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M52.48,35.23,69.6,19.4a3.23,3.23,0,0,0-2.19-5.6H32.59a3.23,3.23,0,0,0-2.19,5.6L47.52,35.23A3.66,3.66,0,0,0,52.48,35.23Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"RecipePageDown\", {\n                        id = \"RecipePageDown\",\n                        x1 = 70,\n                        x2 = 270,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"RecipePageDown\")\n        end\n\n        if indexCount > 1 and CurrentRecipePage > 1 then\n            screenOutput = screenOutput .. [[<svg x=\"280\" y=\"1050\">\n                                <rect x=\"0\" y=\"0\" rx=\"10\" ry=\"10\" width=\"200\" height=\"50\" style=\"fill:]]..RecipeBackgroundColor..[[;\" />\n                                <svg x=\"80\" y=\"15\"><path d=\"M47.52,14.77,30.4,30.6a3.23,3.23,0,0,0,2.19,5.6H67.41a3.23,3.23,0,0,0,2.19-5.6L52.48,14.77A3.66,3.66,0,0,0,47.52,14.77Z\" transform=\"translate(-29.36 -13.8)\"/></svg>\n                            </svg>]]\n            UpdateClickArea(\"RecipePageUp\", {\n                        id = \"RecipePageUp\",\n                        x1 = 280,\n                        x2 = 480,\n                        y1 = 1050,\n                        y2 = 1105\n                    })\n        else\n            DisableClickArea(\"RecipePageUp\")\n        end\n    end\n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"950\" class=\"fmstartr\">Stock Warnings: ]] ..\n                                   stockWarnings ..[[</text>]]\n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"1005\" class=\"fmstartr\">Industry Warnings: ]] ..\n                                   indWarnings ..[[</text>]]\n    screenOutput = screenOutput .. [[<text x=\"1000\" y=\"1060\" class=\"fmstartr\">Number of Industries: ]] ..\n                                   #displayLine ..[[</text>]]\n\n    screenOutput = screenOutput .. [[</svg>]]\n\n    DrawSVG(screenOutput,screen1)\nend\n\n--unit.hide()\n--pldb.clear()\ncommsdb.setStringValue(\"Res\"..channel,\"\")\ncommsdb.setStringValue(\"Req\"..channel,\"\")\ngetStockData()\ngetIndData()\nnextRecipe = 1\nlocal storedProdLine = pldb.getStringValue(ProdLine)\nif not(storedProdLine==nil) and not (storedProdLine==\"\") then\n    stockWarnings = 0\n    indWarnings = 0\n    tempLine={}\n    loadProductionLine(storedProdLine)\n    --getStockData()\n    --getIndData()\n    monitorProductionLine()\n    for i=1,#tempLine do\n        displayLine[i]=tempLine[i]\n    end\n    DrawRecipeList()\nelse\n    qRecipe(ProdLine)\n    processingRecipe = false\n    unit.setTimer(\"recipeQ\",1)\nend\nunit.setTimer(\"screenRefresh\",30)\nDrawRecipeList()\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"3"},{"code":"if not(processingRecipe) then\n    if not(recipeQueue[nextRecipe] == nil) then\n        for i=nextRecipe, #recipeQueue do\n            if not(recipeQueue[i]==nil) and not(recipeList[recipeQueue[i]]) then \n                break \n            else\n                nextRecipe=nextRecipe+1\n            end\n        end\n        --system.print(recipeQueue[nextRecipe])\n        reqRecipe(recipeQueue[nextRecipe])\n        processingRecipe=true\n    end\nend","filter":{"args":[{"value":"recipeQ"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"4"},{"code":"\nif #recipeQueue <= nextRecipe then\n    --system.print(\"Monitoring Production Line\")\n    stockWarnings = 0\n    indWarnings = 0\n    getStockData()\n    getIndData()\n    monitorProductionLine()\n    storeProductionLine()\n    displayLine={}\n    for i=1,#tempLine do\n        displayLine[i]=tempLine[i]\n        --system.print(json.encode(displayLine[i]))\n    end\n    DrawRecipeList()\nelse\n    --system.print(\"Building Production Line...\")\n    for i=1,#tempLine do\n        displayLine[i]=tempLine[i]\n    end\n    DrawRecipeList()\nend","filter":{"args":[{"value":"screenRefresh"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"5"},{"code":"if text==\"reset\" then\n    system.print(\"Resetting Production Line\")\n    pldb.clear()\n    getStockData()\n    getIndData()\n    nextRecipe = 1\n    tempLine={}\n    recipeList={}\n    displayLine={}\n    curRecipe = {}\n    reqType = \"R\"\n    recipeQueue = {}\n    qRecipe(ProdLine)\n    processingRecipe = false\n    unit.setTimer(\"recipeQ\",1)\nend","filter":{"args":[{"variable":"*"}],"signature":"inputText(text)","slotKey":"-2"},"key":"6"}],"methods":[],"events":[]}
