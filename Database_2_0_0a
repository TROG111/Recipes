{"slots":{"0":{"name":"db1","type":{"events":[],"methods":[]}},"1":{"name":"db2","type":{"events":[],"methods":[]}},"2":{"name":"db3","type":{"events":[],"methods":[]}},"3":{"name":"db4","type":{"events":[],"methods":[]}},"4":{"name":"db5","type":{"events":[],"methods":[]}},"5":{"name":"db6","type":{"events":[],"methods":[]}},"6":{"name":"db7","type":{"events":[],"methods":[]}},"7":{"name":"db8","type":{"events":[],"methods":[]}},"8":{"name":"db9","type":{"events":[],"methods":[]}},"9":{"name":"massdb","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"rec = require('cpml.recipes')","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"json = require('dkjson')\ndatabankList = {}\ndbNameList={}\nmenuDatabank = {}\nrecipeIndexString = \"\"\nmenuElements= \"\"\nmenuParts=\"\"\nmenuConsumables=\"\"\nmassStr=\"\"\nVersion = \"2_0_0a\"\n\nfunction linkDatabank()\n    databankList[1] = db1\n    databankList[2] = db2\n    databankList[3] = db3\n    databankList[4] = db4\n    databankList[5] = db5\n    databankList[6] = db6\n    databankList[7] = db7\n    databankList[8] = db8\n    databankList[9] = db9\n    databankList[10] = massdb\n\n    menuDatabank = databankList[9]\n    for i=1,10 do\n        databankList[i].clear()\n    end\nend\n\nlinkDatabank()\nunit.hide()\nunit.setTimer(\"database\",2)\nsystem.print(\"Recipe Database Build version: \"..Version)\n\ncurrentDatabank = 1\nrecipeIndex=0\nlastIndex=0\nlastStart=0\nrecipeMenuIndex=0\nelementMenuIndex=0\nconsumableMenuIndex=0\npartsMenuIndex=0","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"1"},{"code":"local function buildRecipeMenu(start)\n    local recipe={}\n    local i=0\n    \n    for i=start, start+25 do\n      if i<=#RecipeList then\n      recipe = json.decode(RecipeList[i])  \n      if not(recipe == nil) then\n        for x,y in pairs(recipe) do\n            if not(y == nil) then\n                recipeMenuIndex = recipeMenuIndex + 1\n                \n                recipeIndexString=recipeIndexString..y.nm..\":\" \n                        system.print(\"name:\"..y.nm..\" mass: \"..y.ms)\n                local newStr = [[{\"]]..y.nm..[[\",]]..(math.floor(tonumber(y.ms)*100)/100)..[[}]]\n                massStr = massStr..newStr\n                system.print(newStr)\n                local j=1\n                if not(y.nd==nil) then\n                    while y.nd[j] and not(y.nd[j]==\"\") do\n                        if string.find(y.nd[j],\"Asl\") then\n                            elementMenuIndex = elementMenuIndex + 1\n                            --databankList[9].setIntValue(string.format(\"A%d\",elementMenuIndex),recipeMenuIndex)\n                            menuElements=menuElements..recipeMenuIndex    \n                            break\n                        end\n                        j=j+1\n                    end\n                end\n                menuElements=menuElements..\":\"                  \n                if string.find(y.tp,\"Ammo\") or y.tp == \"Cat\" or y.tp==\"Fuel\" or y.tp==\"Warp Cell\" then\n                    consumableMenuIndex = consumableMenuIndex + 1\n                    --databankList[9].setIntValue(string.format(\"C%d\",consumableMenuIndex),recipeMenuIndex)\n                    menuConsumables = menuConsumables..recipeMenuIndex\n                end\n                menuConsumables = menuConsumables..\":\"\n                if y.tp == \"Prd\" or y.tp==\"IntP\" or y.tp==\"CpxP\" or y.tp==\"Execptional Part\" or \n                   y.tp==\"FunP\" or y.tp==\"StrP\" then\n                    partsMenuIndex = partsMenuIndex + 1\n                    --databankList[9].setIntValue(string.format(\"P%d\",partsMenuIndex),recipeMenuIndex)\n                    menuParts = menuParts..recipeMenuIndex\n                end\n                menuParts = menuParts..\":\"\n            end\n        end\n        else\n            return 0\n        end\n      else\n        return 0\n      end\n    end\n    return start+25\nend\n\nlastIndex = buildRecipeMenu(lastIndex+1)\ncollectgarbage(\"collect\")\nif lastIndex == 0 then\n    unit.stopTimer(\"menus\")\n    databankList[9].setStringValue(\"recipeIndex\",recipeIndexString)\n    databankList[9].setStringValue(\"menuElements\",menuElements)\n    databankList[9].setStringValue(\"menuConsumables\",menuConsumables)\n    databankList[9].setStringValue(\"menuParts\",menuParts)\n    massdb.setStringValue(\"recipeIndex\",massStr)\n    system.print(massStr)\n\n    system.print(\"Menu Build Complete\")\n    system.print(\" recipes = \"..recipeMenuIndex\n        ..\" elements = \"..elementMenuIndex..\" consumables = \"..consumableMenuIndex\n        ..\" parts = \"..partsMenuIndex) \n    for i=1,8 do\n        system.print(\"DBID: \"..i..\"Id: \"..databankList[i].getId())\n    end\n    system.print(\"DBID: 9/menudb Id: \"..databankList[9].getId())\nelse\n    system.print(\"count = \"..lastIndex..\" recipes = \"..recipeMenuIndex\n        ..\" elements = \"..elementMenuIndex..\" consumables = \"..consumableMenuIndex\n        ..\" parts = \"..partsMenuIndex)\nend","filter":{"args":[{"value":"menus"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"\nlocal batchSize=25\n\nlocal function buildDatabase(start)\n    lastStart = start\n    local recipe={}\n    local i=0\n    for i=start, start+batchSize do\n      if i<=#RecipeList then\n        recipe = json.decode(RecipeList[i]) \n        if not(recipe == nil) then\n          for x,y in pairs(recipe) do\n            if not(y == nil) then\n                recipeIndex = recipeIndex + 1\n                --system.print(\"recipeIndex=\"..recipeIndex..\":\"..x)\n                local recipeStr = json.encode(y)\n                databankList[currentDatabank].setStringValue(x,recipeStr)\n            end\n          end\n        else\n            return 0\n        end\n      else\n        return 0\n      end\n    end\n    return start+batchSize\nend\n\n\nfunction nextDatabank(recipeIndex)\n    currentDatabank = currentDatabank+1\n    databankList[currentDatabank].setIntValue(\"DBid\",currentDatabank)\n    system.print(\"DB\"..currentDatabank..\" recipeCount=\"..recipeIndex) \nend\n\n--system.print(\"LastIndex=\"..recipeIndex..\" Laststart=\"..lastStart)\nif not(recipeIndex == 0) and recipeIndex - lastStart < batchSize then\n    recipeIndex = recipeIndex-1\n    nextDatabank(recipeIndex)\nend\nlastIndex = buildDatabase(recipeIndex+1)\n\n\n--lastIndex = buildDatabase(lastIndex+1)\ncollectgarbage(\"collect\")\nif lastIndex == 0 then\n    system.print(\"Last Recipe:\"..RecipeList[recipeIndex])\n    system.print(\"Database Load Complete\")\n    unit.stopTimer(\"database\")\n    lastIndex=0\n    recipeMenuIndex=0\n    elementMenuIndex=0\n    consumableMenuIndex=0\n    partsMenuIndex=0\n    databankList[9].clear()\n    databankList[9].setIntValue(\"DBid\",9)\n    system.print(\"Building Menu Started\")\n    unit.setTimer(\"menus\",2)\nelse\n    system.print(\"count = \"..lastIndex)\nend","filter":{"args":[{"value":"database"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"}],"methods":[],"events":[]}
